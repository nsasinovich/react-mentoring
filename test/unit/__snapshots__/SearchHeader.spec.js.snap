// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<SearchHeader /> should contain SearchInput element 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <SearchHeader />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <Logo />,
        <h2
          className="find-movie"
        >
          Find your movie
        </h2>,
        <SearchInput />,
        <div
          className="button-group"
        >
          <div
            className="filter-buttons"
          >
            <p
              className="search-by"
            >
              Search by
            </p>
            <Button
              buttonClass="filter-button button-red"
            >
              genre
            </Button>
            <Button
              buttonClass="filter-button button-grey"
            >
              title
            </Button>
          </div>
          <Button
            buttonClass="search-button button-red"
          >
            Search
          </Button>
        </div>,
      ],
      "className": "search-header",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Find your movie",
          "className": "find-movie",
        },
        "ref": null,
        "rendered": "Find your movie",
        "type": "h2",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <div
              className="filter-buttons"
            >
              <p
                className="search-by"
              >
                Search by
              </p>
              <Button
                buttonClass="filter-button button-red"
              >
                genre
              </Button>
              <Button
                buttonClass="filter-button button-grey"
              >
                title
              </Button>
            </div>,
            <Button
              buttonClass="search-button button-red"
            >
              Search
            </Button>,
          ],
          "className": "button-group",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <p
                  className="search-by"
                >
                  Search by
                </p>,
                <Button
                  buttonClass="filter-button button-red"
                >
                  genre
                </Button>,
                <Button
                  buttonClass="filter-button button-grey"
                >
                  title
                </Button>,
              ],
              "className": "filter-buttons",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Search by",
                  "className": "search-by",
                },
                "ref": null,
                "rendered": "Search by",
                "type": "p",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "buttonClass": "filter-button button-red",
                  "children": "genre",
                },
                "ref": null,
                "rendered": "genre",
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "buttonClass": "filter-button button-grey",
                  "children": "title",
                },
                "ref": null,
                "rendered": "title",
                "type": [Function],
              },
            ],
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "buttonClass": "search-button button-red",
              "children": "Search",
            },
            "ref": null,
            "rendered": "Search",
            "type": [Function],
          },
        ],
        "type": "div",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <Logo />,
          <h2
            className="find-movie"
          >
            Find your movie
          </h2>,
          <SearchInput />,
          <div
            className="button-group"
          >
            <div
              className="filter-buttons"
            >
              <p
                className="search-by"
              >
                Search by
              </p>
              <Button
                buttonClass="filter-button button-red"
              >
                genre
              </Button>
              <Button
                buttonClass="filter-button button-grey"
              >
                title
              </Button>
            </div>
            <Button
              buttonClass="search-button button-red"
            >
              Search
            </Button>
          </div>,
        ],
        "className": "search-header",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Find your movie",
            "className": "find-movie",
          },
          "ref": null,
          "rendered": "Find your movie",
          "type": "h2",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <div
                className="filter-buttons"
              >
                <p
                  className="search-by"
                >
                  Search by
                </p>
                <Button
                  buttonClass="filter-button button-red"
                >
                  genre
                </Button>
                <Button
                  buttonClass="filter-button button-grey"
                >
                  title
                </Button>
              </div>,
              <Button
                buttonClass="search-button button-red"
              >
                Search
              </Button>,
            ],
            "className": "button-group",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <p
                    className="search-by"
                  >
                    Search by
                  </p>,
                  <Button
                    buttonClass="filter-button button-red"
                  >
                    genre
                  </Button>,
                  <Button
                    buttonClass="filter-button button-grey"
                  >
                    title
                  </Button>,
                ],
                "className": "filter-buttons",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "Search by",
                    "className": "search-by",
                  },
                  "ref": null,
                  "rendered": "Search by",
                  "type": "p",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "buttonClass": "filter-button button-red",
                    "children": "genre",
                  },
                  "ref": null,
                  "rendered": "genre",
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "buttonClass": "filter-button button-grey",
                    "children": "title",
                  },
                  "ref": null,
                  "rendered": "title",
                  "type": [Function],
                },
              ],
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "buttonClass": "search-button button-red",
                "children": "Search",
              },
              "ref": null,
              "rendered": "Search",
              "type": [Function],
            },
          ],
          "type": "div",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;

exports[`<SearchHeader /> should contain search button 1`] = `
ReactWrapper {
  "length": 1,
  Symbol(enzyme.__unrendered__): <SearchHeader />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__node__): Object {
    "instance": SearchHeader {
      "_reactInternalFiber": FiberNode {
        "_debugID": 5,
        "_debugIsCurrentlyTiming": false,
        "_debugOwner": FiberNode {
          "_debugID": 4,
          "_debugIsCurrentlyTiming": false,
          "_debugOwner": null,
          "_debugSource": null,
          "alternate": null,
          "child": [Circular],
          "effectTag": 1,
          "expirationTime": 0,
          "firstEffect": null,
          "index": 0,
          "key": null,
          "lastEffect": null,
          "memoizedProps": Object {
            "Component": [Function],
            "context": null,
            "props": Object {},
          },
          "memoizedState": Object {
            "context": null,
            "mount": true,
            "props": Object {},
          },
          "mode": 0,
          "nextEffect": null,
          "pendingProps": Object {
            "Component": [Function],
            "context": null,
            "props": Object {},
          },
          "ref": null,
          "return": FiberNode {
            "_debugID": 1,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "alternate": FiberNode {
              "_debugID": 1,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "alternate": [Circular],
              "child": null,
              "effectTag": 0,
              "expirationTime": 1,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": null,
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": null,
              "ref": null,
              "return": null,
              "sibling": null,
              "stateNode": Object {
                "containerInfo": <div>
                  <div
                    class="search-header"
                  >
                    <p
                      class="logo"
                    >
                      netflixroulette
                    </p>
                    <h2
                      class="find-movie"
                    >
                      Find your movie
                    </h2>
                    <div
                      class="search-input-wrapper"
                    >
                      <input
                        class="search-input"
                        placeholder="Let's find your movie"
                      />
                      <img
                        src="test-file-stub"
                      />
                    </div>
                    <div
                      class="button-group"
                    >
                      <div
                        class="filter-buttons"
                      >
                        <p
                          class="search-by"
                        >
                          Search by
                        </p>
                        <button
                          class="button filter-button button-red"
                        >
                          genre
                        </button>
                        <button
                          class="button filter-button button-grey"
                        >
                          title
                        </button>
                      </div>
                      <button
                        class="button search-button button-red"
                      >
                        Search
                      </button>
                    </div>
                  </div>
                </div>,
                "context": Object {},
                "current": [Circular],
                "finishedWork": null,
                "firstBatch": null,
                "hydrate": false,
                "nextScheduledRoot": null,
                "pendingChildren": null,
                "pendingCommitExpirationTime": 0,
                "pendingContext": null,
                "remainingExpirationTime": 0,
              },
              "tag": 3,
              "type": null,
              "updateQueue": Object {
                "baseState": null,
                "callbackList": null,
                "capturedValues": null,
                "expirationTime": 1,
                "first": Object {
                  "callback": null,
                  "capturedValue": null,
                  "expirationTime": 1,
                  "isForced": false,
                  "isReplace": false,
                  "next": null,
                  "partialState": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={Object {}}
                    />,
                  },
                },
                "hasForceUpdate": false,
                "isInitialized": false,
                "isProcessing": false,
                "last": Object {
                  "callback": null,
                  "capturedValue": null,
                  "expirationTime": 1,
                  "isForced": false,
                  "isReplace": false,
                  "next": null,
                  "partialState": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={Object {}}
                    />,
                  },
                },
              },
            },
            "child": [Circular],
            "effectTag": 32,
            "expirationTime": 0,
            "firstEffect": [Circular],
            "index": 0,
            "key": null,
            "lastEffect": [Circular],
            "memoizedProps": null,
            "memoizedState": Object {
              "element": <WrapperComponent
                Component={[Function]}
                context={null}
                props={Object {}}
              />,
            },
            "mode": 0,
            "nextEffect": null,
            "pendingProps": null,
            "ref": null,
            "return": null,
            "sibling": null,
            "stateNode": Object {
              "containerInfo": <div>
                <div
                  class="search-header"
                >
                  <p
                    class="logo"
                  >
                    netflixroulette
                  </p>
                  <h2
                    class="find-movie"
                  >
                    Find your movie
                  </h2>
                  <div
                    class="search-input-wrapper"
                  >
                    <input
                      class="search-input"
                      placeholder="Let's find your movie"
                    />
                    <img
                      src="test-file-stub"
                    />
                  </div>
                  <div
                    class="button-group"
                  >
                    <div
                      class="filter-buttons"
                    >
                      <p
                        class="search-by"
                      >
                        Search by
                      </p>
                      <button
                        class="button filter-button button-red"
                      >
                        genre
                      </button>
                      <button
                        class="button filter-button button-grey"
                      >
                        title
                      </button>
                    </div>
                    <button
                      class="button search-button button-red"
                    >
                      Search
                    </button>
                  </div>
                </div>
              </div>,
              "context": Object {},
              "current": [Circular],
              "finishedWork": null,
              "firstBatch": null,
              "hydrate": false,
              "nextScheduledRoot": null,
              "pendingChildren": null,
              "pendingCommitExpirationTime": 0,
              "pendingContext": null,
              "remainingExpirationTime": 0,
            },
            "tag": 3,
            "type": null,
            "updateQueue": Object {
              "baseState": Object {
                "element": <WrapperComponent
                  Component={[Function]}
                  context={null}
                  props={Object {}}
                />,
              },
              "callbackList": null,
              "capturedValues": null,
              "expirationTime": 0,
              "first": null,
              "hasForceUpdate": false,
              "isInitialized": true,
              "isProcessing": false,
              "last": null,
            },
          },
          "sibling": null,
          "stateNode": WrapperComponent {
            "_reactInternalFiber": [Circular],
            "_reactInternalInstance": Object {},
            "context": Object {},
            "props": Object {
              "Component": [Function],
              "context": null,
              "props": Object {},
            },
            "refs": Object {},
            "state": Object {
              "context": null,
              "mount": true,
              "props": Object {},
            },
            "updater": Object {
              "enqueueForceUpdate": [Function],
              "enqueueReplaceState": [Function],
              "enqueueSetState": [Function],
              "isMounted": [Function],
            },
          },
          "tag": 2,
          "type": [Function],
          "updateQueue": null,
        },
        "_debugSource": null,
        "alternate": null,
        "child": FiberNode {
          "_debugID": 6,
          "_debugIsCurrentlyTiming": false,
          "_debugOwner": [Circular],
          "_debugSource": null,
          "alternate": null,
          "child": FiberNode {
            "_debugID": 7,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": [Circular],
            "_debugSource": null,
            "alternate": null,
            "child": FiberNode {
              "_debugID": 11,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": [Circular],
              "_debugSource": null,
              "alternate": null,
              "child": null,
              "effectTag": 0,
              "expirationTime": 0,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {
                "children": "netflixroulette",
                "className": "logo",
              },
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "children": "netflixroulette",
                "className": "logo",
              },
              "ref": null,
              "return": [Circular],
              "sibling": null,
              "stateNode": <p
                class="logo"
              >
                netflixroulette
              </p>,
              "tag": 5,
              "type": "p",
              "updateQueue": null,
            },
            "effectTag": 1,
            "expirationTime": 0,
            "firstEffect": null,
            "index": 0,
            "key": null,
            "lastEffect": null,
            "memoizedProps": Object {},
            "memoizedState": null,
            "mode": 0,
            "nextEffect": null,
            "pendingProps": Object {},
            "ref": null,
            "return": [Circular],
            "sibling": FiberNode {
              "_debugID": 8,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": [Circular],
              "_debugSource": null,
              "alternate": null,
              "child": null,
              "effectTag": 0,
              "expirationTime": 0,
              "firstEffect": null,
              "index": 1,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {
                "children": "Find your movie",
                "className": "find-movie",
              },
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "children": "Find your movie",
                "className": "find-movie",
              },
              "ref": null,
              "return": [Circular],
              "sibling": FiberNode {
                "_debugID": 9,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": [Circular],
                "_debugSource": null,
                "alternate": null,
                "child": FiberNode {
                  "_debugID": 12,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": [Circular],
                  "_debugSource": null,
                  "alternate": null,
                  "child": FiberNode {
                    "_debugID": 13,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": null,
                    "alternate": null,
                    "child": null,
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "className": "search-input",
                      "placeholder": "Let's find your movie",
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "className": "search-input",
                      "placeholder": "Let's find your movie",
                    },
                    "ref": null,
                    "return": [Circular],
                    "sibling": FiberNode {
                      "_debugID": 14,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": null,
                      "alternate": null,
                      "child": null,
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 1,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "src": "test-file-stub",
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "src": "test-file-stub",
                      },
                      "ref": null,
                      "return": [Circular],
                      "sibling": null,
                      "stateNode": <img
                        src="test-file-stub"
                      />,
                      "tag": 5,
                      "type": "img",
                      "updateQueue": null,
                    },
                    "stateNode": <input
                      class="search-input"
                      placeholder="Let's find your movie"
                    />,
                    "tag": 5,
                    "type": "input",
                    "updateQueue": null,
                  },
                  "effectTag": 0,
                  "expirationTime": 0,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "children": Array [
                      <input
                        className="search-input"
                        placeholder="Let's find your movie"
                      />,
                      <img
                        src="test-file-stub"
                      />,
                    ],
                    "className": "search-input-wrapper",
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "children": Array [
                      <input
                        className="search-input"
                        placeholder="Let's find your movie"
                      />,
                      <img
                        src="test-file-stub"
                      />,
                    ],
                    "className": "search-input-wrapper",
                  },
                  "ref": null,
                  "return": [Circular],
                  "sibling": null,
                  "stateNode": <div
                    class="search-input-wrapper"
                  >
                    <input
                      class="search-input"
                      placeholder="Let's find your movie"
                    />
                    <img
                      src="test-file-stub"
                    />
                  </div>,
                  "tag": 5,
                  "type": "div",
                  "updateQueue": null,
                },
                "effectTag": 1,
                "expirationTime": 0,
                "firstEffect": null,
                "index": 2,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {},
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {},
                "ref": null,
                "return": [Circular],
                "sibling": FiberNode {
                  "_debugID": 10,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": [Circular],
                  "_debugSource": null,
                  "alternate": null,
                  "child": FiberNode {
                    "_debugID": 15,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": null,
                    "alternate": null,
                    "child": FiberNode {
                      "_debugID": 17,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": null,
                      "alternate": null,
                      "child": null,
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": "Search by",
                        "className": "search-by",
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "children": "Search by",
                        "className": "search-by",
                      },
                      "ref": null,
                      "return": [Circular],
                      "sibling": FiberNode {
                        "_debugID": 18,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": [Circular],
                        "_debugSource": null,
                        "alternate": null,
                        "child": FiberNode {
                          "_debugID": 20,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": [Circular],
                          "_debugSource": null,
                          "alternate": null,
                          "child": null,
                          "effectTag": 0,
                          "expirationTime": 0,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": Object {
                            "children": "genre",
                            "className": "button filter-button button-red",
                          },
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": Object {
                            "children": "genre",
                            "className": "button filter-button button-red",
                          },
                          "ref": null,
                          "return": [Circular],
                          "sibling": null,
                          "stateNode": <button
                            class="button filter-button button-red"
                          >
                            genre
                          </button>,
                          "tag": 5,
                          "type": "button",
                          "updateQueue": null,
                        },
                        "effectTag": 1,
                        "expirationTime": 0,
                        "firstEffect": null,
                        "index": 1,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "buttonClass": "filter-button button-red",
                          "children": "genre",
                        },
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "buttonClass": "filter-button button-red",
                          "children": "genre",
                        },
                        "ref": null,
                        "return": [Circular],
                        "sibling": FiberNode {
                          "_debugID": 19,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": [Circular],
                          "_debugSource": null,
                          "alternate": null,
                          "child": FiberNode {
                            "_debugID": 21,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": [Circular],
                            "_debugSource": null,
                            "alternate": null,
                            "child": null,
                            "effectTag": 0,
                            "expirationTime": 0,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": Object {
                              "children": "title",
                              "className": "button filter-button button-grey",
                            },
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": Object {
                              "children": "title",
                              "className": "button filter-button button-grey",
                            },
                            "ref": null,
                            "return": [Circular],
                            "sibling": null,
                            "stateNode": <button
                              class="button filter-button button-grey"
                            >
                              title
                            </button>,
                            "tag": 5,
                            "type": "button",
                            "updateQueue": null,
                          },
                          "effectTag": 1,
                          "expirationTime": 0,
                          "firstEffect": null,
                          "index": 2,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": Object {
                            "buttonClass": "filter-button button-grey",
                            "children": "title",
                          },
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": Object {
                            "buttonClass": "filter-button button-grey",
                            "children": "title",
                          },
                          "ref": null,
                          "return": [Circular],
                          "sibling": null,
                          "stateNode": null,
                          "tag": 1,
                          "type": [Function],
                          "updateQueue": null,
                        },
                        "stateNode": null,
                        "tag": 1,
                        "type": [Function],
                        "updateQueue": null,
                      },
                      "stateNode": <p
                        class="search-by"
                      >
                        Search by
                      </p>,
                      "tag": 5,
                      "type": "p",
                      "updateQueue": null,
                    },
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": Array [
                        <p
                          className="search-by"
                        >
                          Search by
                        </p>,
                        <Button
                          buttonClass="filter-button button-red"
                        >
                          genre
                        </Button>,
                        <Button
                          buttonClass="filter-button button-grey"
                        >
                          title
                        </Button>,
                      ],
                      "className": "filter-buttons",
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": Array [
                        <p
                          className="search-by"
                        >
                          Search by
                        </p>,
                        <Button
                          buttonClass="filter-button button-red"
                        >
                          genre
                        </Button>,
                        <Button
                          buttonClass="filter-button button-grey"
                        >
                          title
                        </Button>,
                      ],
                      "className": "filter-buttons",
                    },
                    "ref": null,
                    "return": [Circular],
                    "sibling": FiberNode {
                      "_debugID": 16,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": null,
                      "alternate": null,
                      "child": FiberNode {
                        "_debugID": 22,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": [Circular],
                        "_debugSource": null,
                        "alternate": null,
                        "child": null,
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstEffect": null,
                        "index": 0,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "children": "Search",
                          "className": "button search-button button-red",
                        },
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "children": "Search",
                          "className": "button search-button button-red",
                        },
                        "ref": null,
                        "return": [Circular],
                        "sibling": null,
                        "stateNode": <button
                          class="button search-button button-red"
                        >
                          Search
                        </button>,
                        "tag": 5,
                        "type": "button",
                        "updateQueue": null,
                      },
                      "effectTag": 1,
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 1,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "buttonClass": "search-button button-red",
                        "children": "Search",
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "buttonClass": "search-button button-red",
                        "children": "Search",
                      },
                      "ref": null,
                      "return": [Circular],
                      "sibling": null,
                      "stateNode": null,
                      "tag": 1,
                      "type": [Function],
                      "updateQueue": null,
                    },
                    "stateNode": <div
                      class="filter-buttons"
                    >
                      <p
                        class="search-by"
                      >
                        Search by
                      </p>
                      <button
                        class="button filter-button button-red"
                      >
                        genre
                      </button>
                      <button
                        class="button filter-button button-grey"
                      >
                        title
                      </button>
                    </div>,
                    "tag": 5,
                    "type": "div",
                    "updateQueue": null,
                  },
                  "effectTag": 0,
                  "expirationTime": 0,
                  "firstEffect": null,
                  "index": 3,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "children": Array [
                      <div
                        className="filter-buttons"
                      >
                        <p
                          className="search-by"
                        >
                          Search by
                        </p>
                        <Button
                          buttonClass="filter-button button-red"
                        >
                          genre
                        </Button>
                        <Button
                          buttonClass="filter-button button-grey"
                        >
                          title
                        </Button>
                      </div>,
                      <Button
                        buttonClass="search-button button-red"
                      >
                        Search
                      </Button>,
                    ],
                    "className": "button-group",
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "children": Array [
                      <div
                        className="filter-buttons"
                      >
                        <p
                          className="search-by"
                        >
                          Search by
                        </p>
                        <Button
                          buttonClass="filter-button button-red"
                        >
                          genre
                        </Button>
                        <Button
                          buttonClass="filter-button button-grey"
                        >
                          title
                        </Button>
                      </div>,
                      <Button
                        buttonClass="search-button button-red"
                      >
                        Search
                      </Button>,
                    ],
                    "className": "button-group",
                  },
                  "ref": null,
                  "return": [Circular],
                  "sibling": null,
                  "stateNode": <div
                    class="button-group"
                  >
                    <div
                      class="filter-buttons"
                    >
                      <p
                        class="search-by"
                      >
                        Search by
                      </p>
                      <button
                        class="button filter-button button-red"
                      >
                        genre
                      </button>
                      <button
                        class="button filter-button button-grey"
                      >
                        title
                      </button>
                    </div>
                    <button
                      class="button search-button button-red"
                    >
                      Search
                    </button>
                  </div>,
                  "tag": 5,
                  "type": "div",
                  "updateQueue": null,
                },
                "stateNode": null,
                "tag": 1,
                "type": [Function],
                "updateQueue": null,
              },
              "stateNode": <h2
                class="find-movie"
              >
                Find your movie
              </h2>,
              "tag": 5,
              "type": "h2",
              "updateQueue": null,
            },
            "stateNode": null,
            "tag": 1,
            "type": [Function],
            "updateQueue": null,
          },
          "effectTag": 0,
          "expirationTime": 0,
          "firstEffect": null,
          "index": 0,
          "key": null,
          "lastEffect": null,
          "memoizedProps": Object {
            "children": Array [
              <Logo />,
              <h2
                className="find-movie"
              >
                Find your movie
              </h2>,
              <SearchInput />,
              <div
                className="button-group"
              >
                <div
                  className="filter-buttons"
                >
                  <p
                    className="search-by"
                  >
                    Search by
                  </p>
                  <Button
                    buttonClass="filter-button button-red"
                  >
                    genre
                  </Button>
                  <Button
                    buttonClass="filter-button button-grey"
                  >
                    title
                  </Button>
                </div>
                <Button
                  buttonClass="search-button button-red"
                >
                  Search
                </Button>
              </div>,
            ],
            "className": "search-header",
          },
          "memoizedState": null,
          "mode": 0,
          "nextEffect": null,
          "pendingProps": Object {
            "children": Array [
              <Logo />,
              <h2
                className="find-movie"
              >
                Find your movie
              </h2>,
              <SearchInput />,
              <div
                className="button-group"
              >
                <div
                  className="filter-buttons"
                >
                  <p
                    className="search-by"
                  >
                    Search by
                  </p>
                  <Button
                    buttonClass="filter-button button-red"
                  >
                    genre
                  </Button>
                  <Button
                    buttonClass="filter-button button-grey"
                  >
                    title
                  </Button>
                </div>
                <Button
                  buttonClass="search-button button-red"
                >
                  Search
                </Button>
              </div>,
            ],
            "className": "search-header",
          },
          "ref": null,
          "return": [Circular],
          "sibling": null,
          "stateNode": <div
            class="search-header"
          >
            <p
              class="logo"
            >
              netflixroulette
            </p>
            <h2
              class="find-movie"
            >
              Find your movie
            </h2>
            <div
              class="search-input-wrapper"
            >
              <input
                class="search-input"
                placeholder="Let's find your movie"
              />
              <img
                src="test-file-stub"
              />
            </div>
            <div
              class="button-group"
            >
              <div
                class="filter-buttons"
              >
                <p
                  class="search-by"
                >
                  Search by
                </p>
                <button
                  class="button filter-button button-red"
                >
                  genre
                </button>
                <button
                  class="button filter-button button-grey"
                >
                  title
                </button>
              </div>
              <button
                class="button search-button button-red"
              >
                Search
              </button>
            </div>
          </div>,
          "tag": 5,
          "type": "div",
          "updateQueue": null,
        },
        "effectTag": 1,
        "expirationTime": 0,
        "firstEffect": null,
        "index": 0,
        "key": null,
        "lastEffect": null,
        "memoizedProps": Object {},
        "memoizedState": null,
        "mode": 0,
        "nextEffect": null,
        "pendingProps": Object {},
        "ref": null,
        "return": FiberNode {
          "_debugID": 4,
          "_debugIsCurrentlyTiming": false,
          "_debugOwner": null,
          "_debugSource": null,
          "alternate": null,
          "child": [Circular],
          "effectTag": 1,
          "expirationTime": 0,
          "firstEffect": null,
          "index": 0,
          "key": null,
          "lastEffect": null,
          "memoizedProps": Object {
            "Component": [Function],
            "context": null,
            "props": Object {},
          },
          "memoizedState": Object {
            "context": null,
            "mount": true,
            "props": Object {},
          },
          "mode": 0,
          "nextEffect": null,
          "pendingProps": Object {
            "Component": [Function],
            "context": null,
            "props": Object {},
          },
          "ref": null,
          "return": FiberNode {
            "_debugID": 1,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "alternate": FiberNode {
              "_debugID": 1,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "alternate": [Circular],
              "child": null,
              "effectTag": 0,
              "expirationTime": 1,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": null,
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": null,
              "ref": null,
              "return": null,
              "sibling": null,
              "stateNode": Object {
                "containerInfo": <div>
                  <div
                    class="search-header"
                  >
                    <p
                      class="logo"
                    >
                      netflixroulette
                    </p>
                    <h2
                      class="find-movie"
                    >
                      Find your movie
                    </h2>
                    <div
                      class="search-input-wrapper"
                    >
                      <input
                        class="search-input"
                        placeholder="Let's find your movie"
                      />
                      <img
                        src="test-file-stub"
                      />
                    </div>
                    <div
                      class="button-group"
                    >
                      <div
                        class="filter-buttons"
                      >
                        <p
                          class="search-by"
                        >
                          Search by
                        </p>
                        <button
                          class="button filter-button button-red"
                        >
                          genre
                        </button>
                        <button
                          class="button filter-button button-grey"
                        >
                          title
                        </button>
                      </div>
                      <button
                        class="button search-button button-red"
                      >
                        Search
                      </button>
                    </div>
                  </div>
                </div>,
                "context": Object {},
                "current": [Circular],
                "finishedWork": null,
                "firstBatch": null,
                "hydrate": false,
                "nextScheduledRoot": null,
                "pendingChildren": null,
                "pendingCommitExpirationTime": 0,
                "pendingContext": null,
                "remainingExpirationTime": 0,
              },
              "tag": 3,
              "type": null,
              "updateQueue": Object {
                "baseState": null,
                "callbackList": null,
                "capturedValues": null,
                "expirationTime": 1,
                "first": Object {
                  "callback": null,
                  "capturedValue": null,
                  "expirationTime": 1,
                  "isForced": false,
                  "isReplace": false,
                  "next": null,
                  "partialState": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={Object {}}
                    />,
                  },
                },
                "hasForceUpdate": false,
                "isInitialized": false,
                "isProcessing": false,
                "last": Object {
                  "callback": null,
                  "capturedValue": null,
                  "expirationTime": 1,
                  "isForced": false,
                  "isReplace": false,
                  "next": null,
                  "partialState": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={Object {}}
                    />,
                  },
                },
              },
            },
            "child": [Circular],
            "effectTag": 32,
            "expirationTime": 0,
            "firstEffect": [Circular],
            "index": 0,
            "key": null,
            "lastEffect": [Circular],
            "memoizedProps": null,
            "memoizedState": Object {
              "element": <WrapperComponent
                Component={[Function]}
                context={null}
                props={Object {}}
              />,
            },
            "mode": 0,
            "nextEffect": null,
            "pendingProps": null,
            "ref": null,
            "return": null,
            "sibling": null,
            "stateNode": Object {
              "containerInfo": <div>
                <div
                  class="search-header"
                >
                  <p
                    class="logo"
                  >
                    netflixroulette
                  </p>
                  <h2
                    class="find-movie"
                  >
                    Find your movie
                  </h2>
                  <div
                    class="search-input-wrapper"
                  >
                    <input
                      class="search-input"
                      placeholder="Let's find your movie"
                    />
                    <img
                      src="test-file-stub"
                    />
                  </div>
                  <div
                    class="button-group"
                  >
                    <div
                      class="filter-buttons"
                    >
                      <p
                        class="search-by"
                      >
                        Search by
                      </p>
                      <button
                        class="button filter-button button-red"
                      >
                        genre
                      </button>
                      <button
                        class="button filter-button button-grey"
                      >
                        title
                      </button>
                    </div>
                    <button
                      class="button search-button button-red"
                    >
                      Search
                    </button>
                  </div>
                </div>
              </div>,
              "context": Object {},
              "current": [Circular],
              "finishedWork": null,
              "firstBatch": null,
              "hydrate": false,
              "nextScheduledRoot": null,
              "pendingChildren": null,
              "pendingCommitExpirationTime": 0,
              "pendingContext": null,
              "remainingExpirationTime": 0,
            },
            "tag": 3,
            "type": null,
            "updateQueue": Object {
              "baseState": Object {
                "element": <WrapperComponent
                  Component={[Function]}
                  context={null}
                  props={Object {}}
                />,
              },
              "callbackList": null,
              "capturedValues": null,
              "expirationTime": 0,
              "first": null,
              "hasForceUpdate": false,
              "isInitialized": true,
              "isProcessing": false,
              "last": null,
            },
          },
          "sibling": null,
          "stateNode": WrapperComponent {
            "_reactInternalFiber": [Circular],
            "_reactInternalInstance": Object {},
            "context": Object {},
            "props": Object {
              "Component": [Function],
              "context": null,
              "props": Object {},
            },
            "refs": Object {},
            "state": Object {
              "context": null,
              "mount": true,
              "props": Object {},
            },
            "updater": Object {
              "enqueueForceUpdate": [Function],
              "enqueueReplaceState": [Function],
              "enqueueSetState": [Function],
              "isMounted": [Function],
            },
          },
          "tag": 2,
          "type": [Function],
          "updateQueue": null,
        },
        "sibling": null,
        "stateNode": [Circular],
        "tag": 2,
        "type": [Function],
        "updateQueue": null,
      },
      "_reactInternalInstance": Object {},
      "context": Object {},
      "props": Object {},
      "refs": Object {},
      "state": null,
      "updater": Object {
        "enqueueForceUpdate": [Function],
        "enqueueReplaceState": [Function],
        "enqueueSetState": [Function],
        "isMounted": [Function],
      },
    },
    "key": undefined,
    "nodeType": "class",
    "props": Object {},
    "ref": null,
    "rendered": Object {
      "instance": <div
        class="search-header"
      >
        <p
          class="logo"
        >
          netflixroulette
        </p>
        <h2
          class="find-movie"
        >
          Find your movie
        </h2>
        <div
          class="search-input-wrapper"
        >
          <input
            class="search-input"
            placeholder="Let's find your movie"
          />
          <img
            src="test-file-stub"
          />
        </div>
        <div
          class="button-group"
        >
          <div
            class="filter-buttons"
          >
            <p
              class="search-by"
            >
              Search by
            </p>
            <button
              class="button filter-button button-red"
            >
              genre
            </button>
            <button
              class="button filter-button button-grey"
            >
              title
            </button>
          </div>
          <button
            class="button search-button button-red"
          >
            Search
          </button>
        </div>
      </div>,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <Logo />,
          <h2
            className="find-movie"
          >
            Find your movie
          </h2>,
          <SearchInput />,
          <div
            className="button-group"
          >
            <div
              className="filter-buttons"
            >
              <p
                className="search-by"
              >
                Search by
              </p>
              <Button
                buttonClass="filter-button button-red"
              >
                genre
              </Button>
              <Button
                buttonClass="filter-button button-grey"
              >
                title
              </Button>
            </div>
            <Button
              buttonClass="search-button button-red"
            >
              Search
            </Button>
          </div>,
        ],
        "className": "search-header",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {},
          "ref": null,
          "rendered": Object {
            "instance": <p
              class="logo"
            >
              netflixroulette
            </p>,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "netflixroulette",
              "className": "logo",
            },
            "ref": null,
            "rendered": Array [
              "netflixroulette",
            ],
            "type": "p",
          },
          "type": [Function],
        },
        Object {
          "instance": <h2
            class="find-movie"
          >
            Find your movie
          </h2>,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Find your movie",
            "className": "find-movie",
          },
          "ref": null,
          "rendered": Array [
            "Find your movie",
          ],
          "type": "h2",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {},
          "ref": null,
          "rendered": Object {
            "instance": <div
              class="search-input-wrapper"
            >
              <input
                class="search-input"
                placeholder="Let's find your movie"
              />
              <img
                src="test-file-stub"
              />
            </div>,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <input
                  className="search-input"
                  placeholder="Let's find your movie"
                />,
                <img
                  src="test-file-stub"
                />,
              ],
              "className": "search-input-wrapper",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": <input
                  class="search-input"
                  placeholder="Let's find your movie"
                />,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "className": "search-input",
                  "placeholder": "Let's find your movie",
                },
                "ref": null,
                "rendered": Array [
                  undefined,
                ],
                "type": "input",
              },
              Object {
                "instance": <img
                  src="test-file-stub"
                />,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "src": "test-file-stub",
                },
                "ref": null,
                "rendered": Array [
                  undefined,
                ],
                "type": "img",
              },
            ],
            "type": "div",
          },
          "type": [Function],
        },
        Object {
          "instance": <div
            class="button-group"
          >
            <div
              class="filter-buttons"
            >
              <p
                class="search-by"
              >
                Search by
              </p>
              <button
                class="button filter-button button-red"
              >
                genre
              </button>
              <button
                class="button filter-button button-grey"
              >
                title
              </button>
            </div>
            <button
              class="button search-button button-red"
            >
              Search
            </button>
          </div>,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <div
                className="filter-buttons"
              >
                <p
                  className="search-by"
                >
                  Search by
                </p>
                <Button
                  buttonClass="filter-button button-red"
                >
                  genre
                </Button>
                <Button
                  buttonClass="filter-button button-grey"
                >
                  title
                </Button>
              </div>,
              <Button
                buttonClass="search-button button-red"
              >
                Search
              </Button>,
            ],
            "className": "button-group",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": <div
                class="filter-buttons"
              >
                <p
                  class="search-by"
                >
                  Search by
                </p>
                <button
                  class="button filter-button button-red"
                >
                  genre
                </button>
                <button
                  class="button filter-button button-grey"
                >
                  title
                </button>
              </div>,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <p
                    className="search-by"
                  >
                    Search by
                  </p>,
                  <Button
                    buttonClass="filter-button button-red"
                  >
                    genre
                  </Button>,
                  <Button
                    buttonClass="filter-button button-grey"
                  >
                    title
                  </Button>,
                ],
                "className": "filter-buttons",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": <p
                    class="search-by"
                  >
                    Search by
                  </p>,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "Search by",
                    "className": "search-by",
                  },
                  "ref": null,
                  "rendered": Array [
                    "Search by",
                  ],
                  "type": "p",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "buttonClass": "filter-button button-red",
                    "children": "genre",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": <button
                      class="button filter-button button-red"
                    >
                      genre
                    </button>,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": "genre",
                      "className": "button filter-button button-red",
                    },
                    "ref": null,
                    "rendered": Array [
                      "genre",
                    ],
                    "type": "button",
                  },
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "buttonClass": "filter-button button-grey",
                    "children": "title",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": <button
                      class="button filter-button button-grey"
                    >
                      title
                    </button>,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": "title",
                      "className": "button filter-button button-grey",
                    },
                    "ref": null,
                    "rendered": Array [
                      "title",
                    ],
                    "type": "button",
                  },
                  "type": [Function],
                },
              ],
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "buttonClass": "search-button button-red",
                "children": "Search",
              },
              "ref": null,
              "rendered": Object {
                "instance": <button
                  class="button search-button button-red"
                >
                  Search
                </button>,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Search",
                  "className": "button search-button button-red",
                },
                "ref": null,
                "rendered": Array [
                  "Search",
                ],
                "type": "button",
              },
              "type": [Function],
            },
          ],
          "type": "div",
        },
      ],
      "type": "div",
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": SearchHeader {
        "_reactInternalFiber": FiberNode {
          "_debugID": 5,
          "_debugIsCurrentlyTiming": false,
          "_debugOwner": FiberNode {
            "_debugID": 4,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "alternate": null,
            "child": [Circular],
            "effectTag": 1,
            "expirationTime": 0,
            "firstEffect": null,
            "index": 0,
            "key": null,
            "lastEffect": null,
            "memoizedProps": Object {
              "Component": [Function],
              "context": null,
              "props": Object {},
            },
            "memoizedState": Object {
              "context": null,
              "mount": true,
              "props": Object {},
            },
            "mode": 0,
            "nextEffect": null,
            "pendingProps": Object {
              "Component": [Function],
              "context": null,
              "props": Object {},
            },
            "ref": null,
            "return": FiberNode {
              "_debugID": 1,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "alternate": FiberNode {
                "_debugID": 1,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": null,
                "alternate": [Circular],
                "child": null,
                "effectTag": 0,
                "expirationTime": 1,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": null,
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": null,
                "ref": null,
                "return": null,
                "sibling": null,
                "stateNode": Object {
                  "containerInfo": <div>
                    <div
                      class="search-header"
                    >
                      <p
                        class="logo"
                      >
                        netflixroulette
                      </p>
                      <h2
                        class="find-movie"
                      >
                        Find your movie
                      </h2>
                      <div
                        class="search-input-wrapper"
                      >
                        <input
                          class="search-input"
                          placeholder="Let's find your movie"
                        />
                        <img
                          src="test-file-stub"
                        />
                      </div>
                      <div
                        class="button-group"
                      >
                        <div
                          class="filter-buttons"
                        >
                          <p
                            class="search-by"
                          >
                            Search by
                          </p>
                          <button
                            class="button filter-button button-red"
                          >
                            genre
                          </button>
                          <button
                            class="button filter-button button-grey"
                          >
                            title
                          </button>
                        </div>
                        <button
                          class="button search-button button-red"
                        >
                          Search
                        </button>
                      </div>
                    </div>
                  </div>,
                  "context": Object {},
                  "current": [Circular],
                  "finishedWork": null,
                  "firstBatch": null,
                  "hydrate": false,
                  "nextScheduledRoot": null,
                  "pendingChildren": null,
                  "pendingCommitExpirationTime": 0,
                  "pendingContext": null,
                  "remainingExpirationTime": 0,
                },
                "tag": 3,
                "type": null,
                "updateQueue": Object {
                  "baseState": null,
                  "callbackList": null,
                  "capturedValues": null,
                  "expirationTime": 1,
                  "first": Object {
                    "callback": null,
                    "capturedValue": null,
                    "expirationTime": 1,
                    "isForced": false,
                    "isReplace": false,
                    "next": null,
                    "partialState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={Object {}}
                      />,
                    },
                  },
                  "hasForceUpdate": false,
                  "isInitialized": false,
                  "isProcessing": false,
                  "last": Object {
                    "callback": null,
                    "capturedValue": null,
                    "expirationTime": 1,
                    "isForced": false,
                    "isReplace": false,
                    "next": null,
                    "partialState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={Object {}}
                      />,
                    },
                  },
                },
              },
              "child": [Circular],
              "effectTag": 32,
              "expirationTime": 0,
              "firstEffect": [Circular],
              "index": 0,
              "key": null,
              "lastEffect": [Circular],
              "memoizedProps": null,
              "memoizedState": Object {
                "element": <WrapperComponent
                  Component={[Function]}
                  context={null}
                  props={Object {}}
                />,
              },
              "mode": 0,
              "nextEffect": null,
              "pendingProps": null,
              "ref": null,
              "return": null,
              "sibling": null,
              "stateNode": Object {
                "containerInfo": <div>
                  <div
                    class="search-header"
                  >
                    <p
                      class="logo"
                    >
                      netflixroulette
                    </p>
                    <h2
                      class="find-movie"
                    >
                      Find your movie
                    </h2>
                    <div
                      class="search-input-wrapper"
                    >
                      <input
                        class="search-input"
                        placeholder="Let's find your movie"
                      />
                      <img
                        src="test-file-stub"
                      />
                    </div>
                    <div
                      class="button-group"
                    >
                      <div
                        class="filter-buttons"
                      >
                        <p
                          class="search-by"
                        >
                          Search by
                        </p>
                        <button
                          class="button filter-button button-red"
                        >
                          genre
                        </button>
                        <button
                          class="button filter-button button-grey"
                        >
                          title
                        </button>
                      </div>
                      <button
                        class="button search-button button-red"
                      >
                        Search
                      </button>
                    </div>
                  </div>
                </div>,
                "context": Object {},
                "current": [Circular],
                "finishedWork": null,
                "firstBatch": null,
                "hydrate": false,
                "nextScheduledRoot": null,
                "pendingChildren": null,
                "pendingCommitExpirationTime": 0,
                "pendingContext": null,
                "remainingExpirationTime": 0,
              },
              "tag": 3,
              "type": null,
              "updateQueue": Object {
                "baseState": Object {
                  "element": <WrapperComponent
                    Component={[Function]}
                    context={null}
                    props={Object {}}
                  />,
                },
                "callbackList": null,
                "capturedValues": null,
                "expirationTime": 0,
                "first": null,
                "hasForceUpdate": false,
                "isInitialized": true,
                "isProcessing": false,
                "last": null,
              },
            },
            "sibling": null,
            "stateNode": WrapperComponent {
              "_reactInternalFiber": [Circular],
              "_reactInternalInstance": Object {},
              "context": Object {},
              "props": Object {
                "Component": [Function],
                "context": null,
                "props": Object {},
              },
              "refs": Object {},
              "state": Object {
                "context": null,
                "mount": true,
                "props": Object {},
              },
              "updater": Object {
                "enqueueForceUpdate": [Function],
                "enqueueReplaceState": [Function],
                "enqueueSetState": [Function],
                "isMounted": [Function],
              },
            },
            "tag": 2,
            "type": [Function],
            "updateQueue": null,
          },
          "_debugSource": null,
          "alternate": null,
          "child": FiberNode {
            "_debugID": 6,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": [Circular],
            "_debugSource": null,
            "alternate": null,
            "child": FiberNode {
              "_debugID": 7,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": [Circular],
              "_debugSource": null,
              "alternate": null,
              "child": FiberNode {
                "_debugID": 11,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": [Circular],
                "_debugSource": null,
                "alternate": null,
                "child": null,
                "effectTag": 0,
                "expirationTime": 0,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "children": "netflixroulette",
                  "className": "logo",
                },
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "children": "netflixroulette",
                  "className": "logo",
                },
                "ref": null,
                "return": [Circular],
                "sibling": null,
                "stateNode": <p
                  class="logo"
                >
                  netflixroulette
                </p>,
                "tag": 5,
                "type": "p",
                "updateQueue": null,
              },
              "effectTag": 1,
              "expirationTime": 0,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {},
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {},
              "ref": null,
              "return": [Circular],
              "sibling": FiberNode {
                "_debugID": 8,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": [Circular],
                "_debugSource": null,
                "alternate": null,
                "child": null,
                "effectTag": 0,
                "expirationTime": 0,
                "firstEffect": null,
                "index": 1,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "children": "Find your movie",
                  "className": "find-movie",
                },
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "children": "Find your movie",
                  "className": "find-movie",
                },
                "ref": null,
                "return": [Circular],
                "sibling": FiberNode {
                  "_debugID": 9,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": [Circular],
                  "_debugSource": null,
                  "alternate": null,
                  "child": FiberNode {
                    "_debugID": 12,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": null,
                    "alternate": null,
                    "child": FiberNode {
                      "_debugID": 13,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": null,
                      "alternate": null,
                      "child": null,
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "className": "search-input",
                        "placeholder": "Let's find your movie",
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "className": "search-input",
                        "placeholder": "Let's find your movie",
                      },
                      "ref": null,
                      "return": [Circular],
                      "sibling": FiberNode {
                        "_debugID": 14,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": [Circular],
                        "_debugSource": null,
                        "alternate": null,
                        "child": null,
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstEffect": null,
                        "index": 1,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "src": "test-file-stub",
                        },
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "src": "test-file-stub",
                        },
                        "ref": null,
                        "return": [Circular],
                        "sibling": null,
                        "stateNode": <img
                          src="test-file-stub"
                        />,
                        "tag": 5,
                        "type": "img",
                        "updateQueue": null,
                      },
                      "stateNode": <input
                        class="search-input"
                        placeholder="Let's find your movie"
                      />,
                      "tag": 5,
                      "type": "input",
                      "updateQueue": null,
                    },
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": Array [
                        <input
                          className="search-input"
                          placeholder="Let's find your movie"
                        />,
                        <img
                          src="test-file-stub"
                        />,
                      ],
                      "className": "search-input-wrapper",
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": Array [
                        <input
                          className="search-input"
                          placeholder="Let's find your movie"
                        />,
                        <img
                          src="test-file-stub"
                        />,
                      ],
                      "className": "search-input-wrapper",
                    },
                    "ref": null,
                    "return": [Circular],
                    "sibling": null,
                    "stateNode": <div
                      class="search-input-wrapper"
                    >
                      <input
                        class="search-input"
                        placeholder="Let's find your movie"
                      />
                      <img
                        src="test-file-stub"
                      />
                    </div>,
                    "tag": 5,
                    "type": "div",
                    "updateQueue": null,
                  },
                  "effectTag": 1,
                  "expirationTime": 0,
                  "firstEffect": null,
                  "index": 2,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {},
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {},
                  "ref": null,
                  "return": [Circular],
                  "sibling": FiberNode {
                    "_debugID": 10,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": null,
                    "alternate": null,
                    "child": FiberNode {
                      "_debugID": 15,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": null,
                      "alternate": null,
                      "child": FiberNode {
                        "_debugID": 17,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": [Circular],
                        "_debugSource": null,
                        "alternate": null,
                        "child": null,
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstEffect": null,
                        "index": 0,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "children": "Search by",
                          "className": "search-by",
                        },
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "children": "Search by",
                          "className": "search-by",
                        },
                        "ref": null,
                        "return": [Circular],
                        "sibling": FiberNode {
                          "_debugID": 18,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": [Circular],
                          "_debugSource": null,
                          "alternate": null,
                          "child": FiberNode {
                            "_debugID": 20,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": [Circular],
                            "_debugSource": null,
                            "alternate": null,
                            "child": null,
                            "effectTag": 0,
                            "expirationTime": 0,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": Object {
                              "children": "genre",
                              "className": "button filter-button button-red",
                            },
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": Object {
                              "children": "genre",
                              "className": "button filter-button button-red",
                            },
                            "ref": null,
                            "return": [Circular],
                            "sibling": null,
                            "stateNode": <button
                              class="button filter-button button-red"
                            >
                              genre
                            </button>,
                            "tag": 5,
                            "type": "button",
                            "updateQueue": null,
                          },
                          "effectTag": 1,
                          "expirationTime": 0,
                          "firstEffect": null,
                          "index": 1,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": Object {
                            "buttonClass": "filter-button button-red",
                            "children": "genre",
                          },
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": Object {
                            "buttonClass": "filter-button button-red",
                            "children": "genre",
                          },
                          "ref": null,
                          "return": [Circular],
                          "sibling": FiberNode {
                            "_debugID": 19,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": [Circular],
                            "_debugSource": null,
                            "alternate": null,
                            "child": FiberNode {
                              "_debugID": 21,
                              "_debugIsCurrentlyTiming": false,
                              "_debugOwner": [Circular],
                              "_debugSource": null,
                              "alternate": null,
                              "child": null,
                              "effectTag": 0,
                              "expirationTime": 0,
                              "firstEffect": null,
                              "index": 0,
                              "key": null,
                              "lastEffect": null,
                              "memoizedProps": Object {
                                "children": "title",
                                "className": "button filter-button button-grey",
                              },
                              "memoizedState": null,
                              "mode": 0,
                              "nextEffect": null,
                              "pendingProps": Object {
                                "children": "title",
                                "className": "button filter-button button-grey",
                              },
                              "ref": null,
                              "return": [Circular],
                              "sibling": null,
                              "stateNode": <button
                                class="button filter-button button-grey"
                              >
                                title
                              </button>,
                              "tag": 5,
                              "type": "button",
                              "updateQueue": null,
                            },
                            "effectTag": 1,
                            "expirationTime": 0,
                            "firstEffect": null,
                            "index": 2,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": Object {
                              "buttonClass": "filter-button button-grey",
                              "children": "title",
                            },
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": Object {
                              "buttonClass": "filter-button button-grey",
                              "children": "title",
                            },
                            "ref": null,
                            "return": [Circular],
                            "sibling": null,
                            "stateNode": null,
                            "tag": 1,
                            "type": [Function],
                            "updateQueue": null,
                          },
                          "stateNode": null,
                          "tag": 1,
                          "type": [Function],
                          "updateQueue": null,
                        },
                        "stateNode": <p
                          class="search-by"
                        >
                          Search by
                        </p>,
                        "tag": 5,
                        "type": "p",
                        "updateQueue": null,
                      },
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": Array [
                          <p
                            className="search-by"
                          >
                            Search by
                          </p>,
                          <Button
                            buttonClass="filter-button button-red"
                          >
                            genre
                          </Button>,
                          <Button
                            buttonClass="filter-button button-grey"
                          >
                            title
                          </Button>,
                        ],
                        "className": "filter-buttons",
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "children": Array [
                          <p
                            className="search-by"
                          >
                            Search by
                          </p>,
                          <Button
                            buttonClass="filter-button button-red"
                          >
                            genre
                          </Button>,
                          <Button
                            buttonClass="filter-button button-grey"
                          >
                            title
                          </Button>,
                        ],
                        "className": "filter-buttons",
                      },
                      "ref": null,
                      "return": [Circular],
                      "sibling": FiberNode {
                        "_debugID": 16,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": [Circular],
                        "_debugSource": null,
                        "alternate": null,
                        "child": FiberNode {
                          "_debugID": 22,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": [Circular],
                          "_debugSource": null,
                          "alternate": null,
                          "child": null,
                          "effectTag": 0,
                          "expirationTime": 0,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": Object {
                            "children": "Search",
                            "className": "button search-button button-red",
                          },
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": Object {
                            "children": "Search",
                            "className": "button search-button button-red",
                          },
                          "ref": null,
                          "return": [Circular],
                          "sibling": null,
                          "stateNode": <button
                            class="button search-button button-red"
                          >
                            Search
                          </button>,
                          "tag": 5,
                          "type": "button",
                          "updateQueue": null,
                        },
                        "effectTag": 1,
                        "expirationTime": 0,
                        "firstEffect": null,
                        "index": 1,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "buttonClass": "search-button button-red",
                          "children": "Search",
                        },
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "buttonClass": "search-button button-red",
                          "children": "Search",
                        },
                        "ref": null,
                        "return": [Circular],
                        "sibling": null,
                        "stateNode": null,
                        "tag": 1,
                        "type": [Function],
                        "updateQueue": null,
                      },
                      "stateNode": <div
                        class="filter-buttons"
                      >
                        <p
                          class="search-by"
                        >
                          Search by
                        </p>
                        <button
                          class="button filter-button button-red"
                        >
                          genre
                        </button>
                        <button
                          class="button filter-button button-grey"
                        >
                          title
                        </button>
                      </div>,
                      "tag": 5,
                      "type": "div",
                      "updateQueue": null,
                    },
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 3,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": Array [
                        <div
                          className="filter-buttons"
                        >
                          <p
                            className="search-by"
                          >
                            Search by
                          </p>
                          <Button
                            buttonClass="filter-button button-red"
                          >
                            genre
                          </Button>
                          <Button
                            buttonClass="filter-button button-grey"
                          >
                            title
                          </Button>
                        </div>,
                        <Button
                          buttonClass="search-button button-red"
                        >
                          Search
                        </Button>,
                      ],
                      "className": "button-group",
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": Array [
                        <div
                          className="filter-buttons"
                        >
                          <p
                            className="search-by"
                          >
                            Search by
                          </p>
                          <Button
                            buttonClass="filter-button button-red"
                          >
                            genre
                          </Button>
                          <Button
                            buttonClass="filter-button button-grey"
                          >
                            title
                          </Button>
                        </div>,
                        <Button
                          buttonClass="search-button button-red"
                        >
                          Search
                        </Button>,
                      ],
                      "className": "button-group",
                    },
                    "ref": null,
                    "return": [Circular],
                    "sibling": null,
                    "stateNode": <div
                      class="button-group"
                    >
                      <div
                        class="filter-buttons"
                      >
                        <p
                          class="search-by"
                        >
                          Search by
                        </p>
                        <button
                          class="button filter-button button-red"
                        >
                          genre
                        </button>
                        <button
                          class="button filter-button button-grey"
                        >
                          title
                        </button>
                      </div>
                      <button
                        class="button search-button button-red"
                      >
                        Search
                      </button>
                    </div>,
                    "tag": 5,
                    "type": "div",
                    "updateQueue": null,
                  },
                  "stateNode": null,
                  "tag": 1,
                  "type": [Function],
                  "updateQueue": null,
                },
                "stateNode": <h2
                  class="find-movie"
                >
                  Find your movie
                </h2>,
                "tag": 5,
                "type": "h2",
                "updateQueue": null,
              },
              "stateNode": null,
              "tag": 1,
              "type": [Function],
              "updateQueue": null,
            },
            "effectTag": 0,
            "expirationTime": 0,
            "firstEffect": null,
            "index": 0,
            "key": null,
            "lastEffect": null,
            "memoizedProps": Object {
              "children": Array [
                <Logo />,
                <h2
                  className="find-movie"
                >
                  Find your movie
                </h2>,
                <SearchInput />,
                <div
                  className="button-group"
                >
                  <div
                    className="filter-buttons"
                  >
                    <p
                      className="search-by"
                    >
                      Search by
                    </p>
                    <Button
                      buttonClass="filter-button button-red"
                    >
                      genre
                    </Button>
                    <Button
                      buttonClass="filter-button button-grey"
                    >
                      title
                    </Button>
                  </div>
                  <Button
                    buttonClass="search-button button-red"
                  >
                    Search
                  </Button>
                </div>,
              ],
              "className": "search-header",
            },
            "memoizedState": null,
            "mode": 0,
            "nextEffect": null,
            "pendingProps": Object {
              "children": Array [
                <Logo />,
                <h2
                  className="find-movie"
                >
                  Find your movie
                </h2>,
                <SearchInput />,
                <div
                  className="button-group"
                >
                  <div
                    className="filter-buttons"
                  >
                    <p
                      className="search-by"
                    >
                      Search by
                    </p>
                    <Button
                      buttonClass="filter-button button-red"
                    >
                      genre
                    </Button>
                    <Button
                      buttonClass="filter-button button-grey"
                    >
                      title
                    </Button>
                  </div>
                  <Button
                    buttonClass="search-button button-red"
                  >
                    Search
                  </Button>
                </div>,
              ],
              "className": "search-header",
            },
            "ref": null,
            "return": [Circular],
            "sibling": null,
            "stateNode": <div
              class="search-header"
            >
              <p
                class="logo"
              >
                netflixroulette
              </p>
              <h2
                class="find-movie"
              >
                Find your movie
              </h2>
              <div
                class="search-input-wrapper"
              >
                <input
                  class="search-input"
                  placeholder="Let's find your movie"
                />
                <img
                  src="test-file-stub"
                />
              </div>
              <div
                class="button-group"
              >
                <div
                  class="filter-buttons"
                >
                  <p
                    class="search-by"
                  >
                    Search by
                  </p>
                  <button
                    class="button filter-button button-red"
                  >
                    genre
                  </button>
                  <button
                    class="button filter-button button-grey"
                  >
                    title
                  </button>
                </div>
                <button
                  class="button search-button button-red"
                >
                  Search
                </button>
              </div>
            </div>,
            "tag": 5,
            "type": "div",
            "updateQueue": null,
          },
          "effectTag": 1,
          "expirationTime": 0,
          "firstEffect": null,
          "index": 0,
          "key": null,
          "lastEffect": null,
          "memoizedProps": Object {},
          "memoizedState": null,
          "mode": 0,
          "nextEffect": null,
          "pendingProps": Object {},
          "ref": null,
          "return": FiberNode {
            "_debugID": 4,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "alternate": null,
            "child": [Circular],
            "effectTag": 1,
            "expirationTime": 0,
            "firstEffect": null,
            "index": 0,
            "key": null,
            "lastEffect": null,
            "memoizedProps": Object {
              "Component": [Function],
              "context": null,
              "props": Object {},
            },
            "memoizedState": Object {
              "context": null,
              "mount": true,
              "props": Object {},
            },
            "mode": 0,
            "nextEffect": null,
            "pendingProps": Object {
              "Component": [Function],
              "context": null,
              "props": Object {},
            },
            "ref": null,
            "return": FiberNode {
              "_debugID": 1,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "alternate": FiberNode {
                "_debugID": 1,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": null,
                "alternate": [Circular],
                "child": null,
                "effectTag": 0,
                "expirationTime": 1,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": null,
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": null,
                "ref": null,
                "return": null,
                "sibling": null,
                "stateNode": Object {
                  "containerInfo": <div>
                    <div
                      class="search-header"
                    >
                      <p
                        class="logo"
                      >
                        netflixroulette
                      </p>
                      <h2
                        class="find-movie"
                      >
                        Find your movie
                      </h2>
                      <div
                        class="search-input-wrapper"
                      >
                        <input
                          class="search-input"
                          placeholder="Let's find your movie"
                        />
                        <img
                          src="test-file-stub"
                        />
                      </div>
                      <div
                        class="button-group"
                      >
                        <div
                          class="filter-buttons"
                        >
                          <p
                            class="search-by"
                          >
                            Search by
                          </p>
                          <button
                            class="button filter-button button-red"
                          >
                            genre
                          </button>
                          <button
                            class="button filter-button button-grey"
                          >
                            title
                          </button>
                        </div>
                        <button
                          class="button search-button button-red"
                        >
                          Search
                        </button>
                      </div>
                    </div>
                  </div>,
                  "context": Object {},
                  "current": [Circular],
                  "finishedWork": null,
                  "firstBatch": null,
                  "hydrate": false,
                  "nextScheduledRoot": null,
                  "pendingChildren": null,
                  "pendingCommitExpirationTime": 0,
                  "pendingContext": null,
                  "remainingExpirationTime": 0,
                },
                "tag": 3,
                "type": null,
                "updateQueue": Object {
                  "baseState": null,
                  "callbackList": null,
                  "capturedValues": null,
                  "expirationTime": 1,
                  "first": Object {
                    "callback": null,
                    "capturedValue": null,
                    "expirationTime": 1,
                    "isForced": false,
                    "isReplace": false,
                    "next": null,
                    "partialState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={Object {}}
                      />,
                    },
                  },
                  "hasForceUpdate": false,
                  "isInitialized": false,
                  "isProcessing": false,
                  "last": Object {
                    "callback": null,
                    "capturedValue": null,
                    "expirationTime": 1,
                    "isForced": false,
                    "isReplace": false,
                    "next": null,
                    "partialState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={Object {}}
                      />,
                    },
                  },
                },
              },
              "child": [Circular],
              "effectTag": 32,
              "expirationTime": 0,
              "firstEffect": [Circular],
              "index": 0,
              "key": null,
              "lastEffect": [Circular],
              "memoizedProps": null,
              "memoizedState": Object {
                "element": <WrapperComponent
                  Component={[Function]}
                  context={null}
                  props={Object {}}
                />,
              },
              "mode": 0,
              "nextEffect": null,
              "pendingProps": null,
              "ref": null,
              "return": null,
              "sibling": null,
              "stateNode": Object {
                "containerInfo": <div>
                  <div
                    class="search-header"
                  >
                    <p
                      class="logo"
                    >
                      netflixroulette
                    </p>
                    <h2
                      class="find-movie"
                    >
                      Find your movie
                    </h2>
                    <div
                      class="search-input-wrapper"
                    >
                      <input
                        class="search-input"
                        placeholder="Let's find your movie"
                      />
                      <img
                        src="test-file-stub"
                      />
                    </div>
                    <div
                      class="button-group"
                    >
                      <div
                        class="filter-buttons"
                      >
                        <p
                          class="search-by"
                        >
                          Search by
                        </p>
                        <button
                          class="button filter-button button-red"
                        >
                          genre
                        </button>
                        <button
                          class="button filter-button button-grey"
                        >
                          title
                        </button>
                      </div>
                      <button
                        class="button search-button button-red"
                      >
                        Search
                      </button>
                    </div>
                  </div>
                </div>,
                "context": Object {},
                "current": [Circular],
                "finishedWork": null,
                "firstBatch": null,
                "hydrate": false,
                "nextScheduledRoot": null,
                "pendingChildren": null,
                "pendingCommitExpirationTime": 0,
                "pendingContext": null,
                "remainingExpirationTime": 0,
              },
              "tag": 3,
              "type": null,
              "updateQueue": Object {
                "baseState": Object {
                  "element": <WrapperComponent
                    Component={[Function]}
                    context={null}
                    props={Object {}}
                  />,
                },
                "callbackList": null,
                "capturedValues": null,
                "expirationTime": 0,
                "first": null,
                "hasForceUpdate": false,
                "isInitialized": true,
                "isProcessing": false,
                "last": null,
              },
            },
            "sibling": null,
            "stateNode": WrapperComponent {
              "_reactInternalFiber": [Circular],
              "_reactInternalInstance": Object {},
              "context": Object {},
              "props": Object {
                "Component": [Function],
                "context": null,
                "props": Object {},
              },
              "refs": Object {},
              "state": Object {
                "context": null,
                "mount": true,
                "props": Object {},
              },
              "updater": Object {
                "enqueueForceUpdate": [Function],
                "enqueueReplaceState": [Function],
                "enqueueSetState": [Function],
                "isMounted": [Function],
              },
            },
            "tag": 2,
            "type": [Function],
            "updateQueue": null,
          },
          "sibling": null,
          "stateNode": [Circular],
          "tag": 2,
          "type": [Function],
          "updateQueue": null,
        },
        "_reactInternalInstance": Object {},
        "context": Object {},
        "props": Object {},
        "refs": Object {},
        "state": null,
        "updater": Object {
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
        },
      },
      "key": undefined,
      "nodeType": "class",
      "props": Object {},
      "ref": null,
      "rendered": Object {
        "instance": <div
          class="search-header"
        >
          <p
            class="logo"
          >
            netflixroulette
          </p>
          <h2
            class="find-movie"
          >
            Find your movie
          </h2>
          <div
            class="search-input-wrapper"
          >
            <input
              class="search-input"
              placeholder="Let's find your movie"
            />
            <img
              src="test-file-stub"
            />
          </div>
          <div
            class="button-group"
          >
            <div
              class="filter-buttons"
            >
              <p
                class="search-by"
              >
                Search by
              </p>
              <button
                class="button filter-button button-red"
              >
                genre
              </button>
              <button
                class="button filter-button button-grey"
              >
                title
              </button>
            </div>
            <button
              class="button search-button button-red"
            >
              Search
            </button>
          </div>
        </div>,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <Logo />,
            <h2
              className="find-movie"
            >
              Find your movie
            </h2>,
            <SearchInput />,
            <div
              className="button-group"
            >
              <div
                className="filter-buttons"
              >
                <p
                  className="search-by"
                >
                  Search by
                </p>
                <Button
                  buttonClass="filter-button button-red"
                >
                  genre
                </Button>
                <Button
                  buttonClass="filter-button button-grey"
                >
                  title
                </Button>
              </div>
              <Button
                buttonClass="search-button button-red"
              >
                Search
              </Button>
            </div>,
          ],
          "className": "search-header",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {},
            "ref": null,
            "rendered": Object {
              "instance": <p
                class="logo"
              >
                netflixroulette
              </p>,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "netflixroulette",
                "className": "logo",
              },
              "ref": null,
              "rendered": Array [
                "netflixroulette",
              ],
              "type": "p",
            },
            "type": [Function],
          },
          Object {
            "instance": <h2
              class="find-movie"
            >
              Find your movie
            </h2>,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Find your movie",
              "className": "find-movie",
            },
            "ref": null,
            "rendered": Array [
              "Find your movie",
            ],
            "type": "h2",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {},
            "ref": null,
            "rendered": Object {
              "instance": <div
                class="search-input-wrapper"
              >
                <input
                  class="search-input"
                  placeholder="Let's find your movie"
                />
                <img
                  src="test-file-stub"
                />
              </div>,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <input
                    className="search-input"
                    placeholder="Let's find your movie"
                  />,
                  <img
                    src="test-file-stub"
                  />,
                ],
                "className": "search-input-wrapper",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": <input
                    class="search-input"
                    placeholder="Let's find your movie"
                  />,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "className": "search-input",
                    "placeholder": "Let's find your movie",
                  },
                  "ref": null,
                  "rendered": Array [
                    undefined,
                  ],
                  "type": "input",
                },
                Object {
                  "instance": <img
                    src="test-file-stub"
                  />,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "src": "test-file-stub",
                  },
                  "ref": null,
                  "rendered": Array [
                    undefined,
                  ],
                  "type": "img",
                },
              ],
              "type": "div",
            },
            "type": [Function],
          },
          Object {
            "instance": <div
              class="button-group"
            >
              <div
                class="filter-buttons"
              >
                <p
                  class="search-by"
                >
                  Search by
                </p>
                <button
                  class="button filter-button button-red"
                >
                  genre
                </button>
                <button
                  class="button filter-button button-grey"
                >
                  title
                </button>
              </div>
              <button
                class="button search-button button-red"
              >
                Search
              </button>
            </div>,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <div
                  className="filter-buttons"
                >
                  <p
                    className="search-by"
                  >
                    Search by
                  </p>
                  <Button
                    buttonClass="filter-button button-red"
                  >
                    genre
                  </Button>
                  <Button
                    buttonClass="filter-button button-grey"
                  >
                    title
                  </Button>
                </div>,
                <Button
                  buttonClass="search-button button-red"
                >
                  Search
                </Button>,
              ],
              "className": "button-group",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": <div
                  class="filter-buttons"
                >
                  <p
                    class="search-by"
                  >
                    Search by
                  </p>
                  <button
                    class="button filter-button button-red"
                  >
                    genre
                  </button>
                  <button
                    class="button filter-button button-grey"
                  >
                    title
                  </button>
                </div>,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    <p
                      className="search-by"
                    >
                      Search by
                    </p>,
                    <Button
                      buttonClass="filter-button button-red"
                    >
                      genre
                    </Button>,
                    <Button
                      buttonClass="filter-button button-grey"
                    >
                      title
                    </Button>,
                  ],
                  "className": "filter-buttons",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": <p
                      class="search-by"
                    >
                      Search by
                    </p>,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": "Search by",
                      "className": "search-by",
                    },
                    "ref": null,
                    "rendered": Array [
                      "Search by",
                    ],
                    "type": "p",
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "buttonClass": "filter-button button-red",
                      "children": "genre",
                    },
                    "ref": null,
                    "rendered": Object {
                      "instance": <button
                        class="button filter-button button-red"
                      >
                        genre
                      </button>,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "genre",
                        "className": "button filter-button button-red",
                      },
                      "ref": null,
                      "rendered": Array [
                        "genre",
                      ],
                      "type": "button",
                    },
                    "type": [Function],
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "buttonClass": "filter-button button-grey",
                      "children": "title",
                    },
                    "ref": null,
                    "rendered": Object {
                      "instance": <button
                        class="button filter-button button-grey"
                      >
                        title
                      </button>,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "title",
                        "className": "button filter-button button-grey",
                      },
                      "ref": null,
                      "rendered": Array [
                        "title",
                      ],
                      "type": "button",
                    },
                    "type": [Function],
                  },
                ],
                "type": "div",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "buttonClass": "search-button button-red",
                  "children": "Search",
                },
                "ref": null,
                "rendered": Object {
                  "instance": <button
                    class="button search-button button-red"
                  >
                    Search
                  </button>,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "Search",
                    "className": "button search-button button-red",
                  },
                  "ref": null,
                  "rendered": Array [
                    "Search",
                  ],
                  "type": "button",
                },
                "type": [Function],
              },
            ],
            "type": "div",
          },
        ],
        "type": "div",
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;

exports[`<SearchHeader /> should contain two filter buttons 1`] = `
ReactWrapper {
  "length": 1,
  Symbol(enzyme.__unrendered__): <SearchHeader />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__node__): Object {
    "instance": SearchHeader {
      "_reactInternalFiber": FiberNode {
        "_debugID": 26,
        "_debugIsCurrentlyTiming": false,
        "_debugOwner": FiberNode {
          "_debugID": 25,
          "_debugIsCurrentlyTiming": false,
          "_debugOwner": null,
          "_debugSource": null,
          "alternate": null,
          "child": [Circular],
          "effectTag": 1,
          "expirationTime": 0,
          "firstEffect": null,
          "index": 0,
          "key": null,
          "lastEffect": null,
          "memoizedProps": Object {
            "Component": [Function],
            "context": null,
            "props": Object {},
          },
          "memoizedState": Object {
            "context": null,
            "mount": true,
            "props": Object {},
          },
          "mode": 0,
          "nextEffect": null,
          "pendingProps": Object {
            "Component": [Function],
            "context": null,
            "props": Object {},
          },
          "ref": null,
          "return": FiberNode {
            "_debugID": 23,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "alternate": FiberNode {
              "_debugID": 23,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "alternate": [Circular],
              "child": null,
              "effectTag": 0,
              "expirationTime": 1,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": null,
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": null,
              "ref": null,
              "return": null,
              "sibling": null,
              "stateNode": Object {
                "containerInfo": <div>
                  <div
                    class="search-header"
                  >
                    <p
                      class="logo"
                    >
                      netflixroulette
                    </p>
                    <h2
                      class="find-movie"
                    >
                      Find your movie
                    </h2>
                    <div
                      class="search-input-wrapper"
                    >
                      <input
                        class="search-input"
                        placeholder="Let's find your movie"
                      />
                      <img
                        src="test-file-stub"
                      />
                    </div>
                    <div
                      class="button-group"
                    >
                      <div
                        class="filter-buttons"
                      >
                        <p
                          class="search-by"
                        >
                          Search by
                        </p>
                        <button
                          class="button filter-button button-red"
                        >
                          genre
                        </button>
                        <button
                          class="button filter-button button-grey"
                        >
                          title
                        </button>
                      </div>
                      <button
                        class="button search-button button-red"
                      >
                        Search
                      </button>
                    </div>
                  </div>
                </div>,
                "context": Object {},
                "current": [Circular],
                "finishedWork": null,
                "firstBatch": null,
                "hydrate": false,
                "nextScheduledRoot": null,
                "pendingChildren": null,
                "pendingCommitExpirationTime": 0,
                "pendingContext": null,
                "remainingExpirationTime": 0,
              },
              "tag": 3,
              "type": null,
              "updateQueue": Object {
                "baseState": null,
                "callbackList": null,
                "capturedValues": null,
                "expirationTime": 1,
                "first": Object {
                  "callback": null,
                  "capturedValue": null,
                  "expirationTime": 1,
                  "isForced": false,
                  "isReplace": false,
                  "next": null,
                  "partialState": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={Object {}}
                    />,
                  },
                },
                "hasForceUpdate": false,
                "isInitialized": false,
                "isProcessing": false,
                "last": Object {
                  "callback": null,
                  "capturedValue": null,
                  "expirationTime": 1,
                  "isForced": false,
                  "isReplace": false,
                  "next": null,
                  "partialState": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={Object {}}
                    />,
                  },
                },
              },
            },
            "child": [Circular],
            "effectTag": 32,
            "expirationTime": 0,
            "firstEffect": [Circular],
            "index": 0,
            "key": null,
            "lastEffect": [Circular],
            "memoizedProps": null,
            "memoizedState": Object {
              "element": <WrapperComponent
                Component={[Function]}
                context={null}
                props={Object {}}
              />,
            },
            "mode": 0,
            "nextEffect": null,
            "pendingProps": null,
            "ref": null,
            "return": null,
            "sibling": null,
            "stateNode": Object {
              "containerInfo": <div>
                <div
                  class="search-header"
                >
                  <p
                    class="logo"
                  >
                    netflixroulette
                  </p>
                  <h2
                    class="find-movie"
                  >
                    Find your movie
                  </h2>
                  <div
                    class="search-input-wrapper"
                  >
                    <input
                      class="search-input"
                      placeholder="Let's find your movie"
                    />
                    <img
                      src="test-file-stub"
                    />
                  </div>
                  <div
                    class="button-group"
                  >
                    <div
                      class="filter-buttons"
                    >
                      <p
                        class="search-by"
                      >
                        Search by
                      </p>
                      <button
                        class="button filter-button button-red"
                      >
                        genre
                      </button>
                      <button
                        class="button filter-button button-grey"
                      >
                        title
                      </button>
                    </div>
                    <button
                      class="button search-button button-red"
                    >
                      Search
                    </button>
                  </div>
                </div>
              </div>,
              "context": Object {},
              "current": [Circular],
              "finishedWork": null,
              "firstBatch": null,
              "hydrate": false,
              "nextScheduledRoot": null,
              "pendingChildren": null,
              "pendingCommitExpirationTime": 0,
              "pendingContext": null,
              "remainingExpirationTime": 0,
            },
            "tag": 3,
            "type": null,
            "updateQueue": Object {
              "baseState": Object {
                "element": <WrapperComponent
                  Component={[Function]}
                  context={null}
                  props={Object {}}
                />,
              },
              "callbackList": null,
              "capturedValues": null,
              "expirationTime": 0,
              "first": null,
              "hasForceUpdate": false,
              "isInitialized": true,
              "isProcessing": false,
              "last": null,
            },
          },
          "sibling": null,
          "stateNode": WrapperComponent {
            "_reactInternalFiber": [Circular],
            "_reactInternalInstance": Object {},
            "context": Object {},
            "props": Object {
              "Component": [Function],
              "context": null,
              "props": Object {},
            },
            "refs": Object {},
            "state": Object {
              "context": null,
              "mount": true,
              "props": Object {},
            },
            "updater": Object {
              "enqueueForceUpdate": [Function],
              "enqueueReplaceState": [Function],
              "enqueueSetState": [Function],
              "isMounted": [Function],
            },
          },
          "tag": 2,
          "type": [Function],
          "updateQueue": null,
        },
        "_debugSource": null,
        "alternate": null,
        "child": FiberNode {
          "_debugID": 27,
          "_debugIsCurrentlyTiming": false,
          "_debugOwner": [Circular],
          "_debugSource": null,
          "alternate": null,
          "child": FiberNode {
            "_debugID": 28,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": [Circular],
            "_debugSource": null,
            "alternate": null,
            "child": FiberNode {
              "_debugID": 32,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": [Circular],
              "_debugSource": null,
              "alternate": null,
              "child": null,
              "effectTag": 0,
              "expirationTime": 0,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {
                "children": "netflixroulette",
                "className": "logo",
              },
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "children": "netflixroulette",
                "className": "logo",
              },
              "ref": null,
              "return": [Circular],
              "sibling": null,
              "stateNode": <p
                class="logo"
              >
                netflixroulette
              </p>,
              "tag": 5,
              "type": "p",
              "updateQueue": null,
            },
            "effectTag": 1,
            "expirationTime": 0,
            "firstEffect": null,
            "index": 0,
            "key": null,
            "lastEffect": null,
            "memoizedProps": Object {},
            "memoizedState": null,
            "mode": 0,
            "nextEffect": null,
            "pendingProps": Object {},
            "ref": null,
            "return": [Circular],
            "sibling": FiberNode {
              "_debugID": 29,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": [Circular],
              "_debugSource": null,
              "alternate": null,
              "child": null,
              "effectTag": 0,
              "expirationTime": 0,
              "firstEffect": null,
              "index": 1,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {
                "children": "Find your movie",
                "className": "find-movie",
              },
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "children": "Find your movie",
                "className": "find-movie",
              },
              "ref": null,
              "return": [Circular],
              "sibling": FiberNode {
                "_debugID": 30,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": [Circular],
                "_debugSource": null,
                "alternate": null,
                "child": FiberNode {
                  "_debugID": 33,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": [Circular],
                  "_debugSource": null,
                  "alternate": null,
                  "child": FiberNode {
                    "_debugID": 34,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": null,
                    "alternate": null,
                    "child": null,
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "className": "search-input",
                      "placeholder": "Let's find your movie",
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "className": "search-input",
                      "placeholder": "Let's find your movie",
                    },
                    "ref": null,
                    "return": [Circular],
                    "sibling": FiberNode {
                      "_debugID": 35,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": null,
                      "alternate": null,
                      "child": null,
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 1,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "src": "test-file-stub",
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "src": "test-file-stub",
                      },
                      "ref": null,
                      "return": [Circular],
                      "sibling": null,
                      "stateNode": <img
                        src="test-file-stub"
                      />,
                      "tag": 5,
                      "type": "img",
                      "updateQueue": null,
                    },
                    "stateNode": <input
                      class="search-input"
                      placeholder="Let's find your movie"
                    />,
                    "tag": 5,
                    "type": "input",
                    "updateQueue": null,
                  },
                  "effectTag": 0,
                  "expirationTime": 0,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "children": Array [
                      <input
                        className="search-input"
                        placeholder="Let's find your movie"
                      />,
                      <img
                        src="test-file-stub"
                      />,
                    ],
                    "className": "search-input-wrapper",
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "children": Array [
                      <input
                        className="search-input"
                        placeholder="Let's find your movie"
                      />,
                      <img
                        src="test-file-stub"
                      />,
                    ],
                    "className": "search-input-wrapper",
                  },
                  "ref": null,
                  "return": [Circular],
                  "sibling": null,
                  "stateNode": <div
                    class="search-input-wrapper"
                  >
                    <input
                      class="search-input"
                      placeholder="Let's find your movie"
                    />
                    <img
                      src="test-file-stub"
                    />
                  </div>,
                  "tag": 5,
                  "type": "div",
                  "updateQueue": null,
                },
                "effectTag": 1,
                "expirationTime": 0,
                "firstEffect": null,
                "index": 2,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {},
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {},
                "ref": null,
                "return": [Circular],
                "sibling": FiberNode {
                  "_debugID": 31,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": [Circular],
                  "_debugSource": null,
                  "alternate": null,
                  "child": FiberNode {
                    "_debugID": 36,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": null,
                    "alternate": null,
                    "child": FiberNode {
                      "_debugID": 38,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": null,
                      "alternate": null,
                      "child": null,
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": "Search by",
                        "className": "search-by",
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "children": "Search by",
                        "className": "search-by",
                      },
                      "ref": null,
                      "return": [Circular],
                      "sibling": FiberNode {
                        "_debugID": 39,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": [Circular],
                        "_debugSource": null,
                        "alternate": null,
                        "child": FiberNode {
                          "_debugID": 41,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": [Circular],
                          "_debugSource": null,
                          "alternate": null,
                          "child": null,
                          "effectTag": 0,
                          "expirationTime": 0,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": Object {
                            "children": "genre",
                            "className": "button filter-button button-red",
                          },
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": Object {
                            "children": "genre",
                            "className": "button filter-button button-red",
                          },
                          "ref": null,
                          "return": [Circular],
                          "sibling": null,
                          "stateNode": <button
                            class="button filter-button button-red"
                          >
                            genre
                          </button>,
                          "tag": 5,
                          "type": "button",
                          "updateQueue": null,
                        },
                        "effectTag": 1,
                        "expirationTime": 0,
                        "firstEffect": null,
                        "index": 1,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "buttonClass": "filter-button button-red",
                          "children": "genre",
                        },
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "buttonClass": "filter-button button-red",
                          "children": "genre",
                        },
                        "ref": null,
                        "return": [Circular],
                        "sibling": FiberNode {
                          "_debugID": 40,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": [Circular],
                          "_debugSource": null,
                          "alternate": null,
                          "child": FiberNode {
                            "_debugID": 42,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": [Circular],
                            "_debugSource": null,
                            "alternate": null,
                            "child": null,
                            "effectTag": 0,
                            "expirationTime": 0,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": Object {
                              "children": "title",
                              "className": "button filter-button button-grey",
                            },
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": Object {
                              "children": "title",
                              "className": "button filter-button button-grey",
                            },
                            "ref": null,
                            "return": [Circular],
                            "sibling": null,
                            "stateNode": <button
                              class="button filter-button button-grey"
                            >
                              title
                            </button>,
                            "tag": 5,
                            "type": "button",
                            "updateQueue": null,
                          },
                          "effectTag": 1,
                          "expirationTime": 0,
                          "firstEffect": null,
                          "index": 2,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": Object {
                            "buttonClass": "filter-button button-grey",
                            "children": "title",
                          },
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": Object {
                            "buttonClass": "filter-button button-grey",
                            "children": "title",
                          },
                          "ref": null,
                          "return": [Circular],
                          "sibling": null,
                          "stateNode": null,
                          "tag": 1,
                          "type": [Function],
                          "updateQueue": null,
                        },
                        "stateNode": null,
                        "tag": 1,
                        "type": [Function],
                        "updateQueue": null,
                      },
                      "stateNode": <p
                        class="search-by"
                      >
                        Search by
                      </p>,
                      "tag": 5,
                      "type": "p",
                      "updateQueue": null,
                    },
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": Array [
                        <p
                          className="search-by"
                        >
                          Search by
                        </p>,
                        <Button
                          buttonClass="filter-button button-red"
                        >
                          genre
                        </Button>,
                        <Button
                          buttonClass="filter-button button-grey"
                        >
                          title
                        </Button>,
                      ],
                      "className": "filter-buttons",
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": Array [
                        <p
                          className="search-by"
                        >
                          Search by
                        </p>,
                        <Button
                          buttonClass="filter-button button-red"
                        >
                          genre
                        </Button>,
                        <Button
                          buttonClass="filter-button button-grey"
                        >
                          title
                        </Button>,
                      ],
                      "className": "filter-buttons",
                    },
                    "ref": null,
                    "return": [Circular],
                    "sibling": FiberNode {
                      "_debugID": 37,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": null,
                      "alternate": null,
                      "child": FiberNode {
                        "_debugID": 43,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": [Circular],
                        "_debugSource": null,
                        "alternate": null,
                        "child": null,
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstEffect": null,
                        "index": 0,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "children": "Search",
                          "className": "button search-button button-red",
                        },
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "children": "Search",
                          "className": "button search-button button-red",
                        },
                        "ref": null,
                        "return": [Circular],
                        "sibling": null,
                        "stateNode": <button
                          class="button search-button button-red"
                        >
                          Search
                        </button>,
                        "tag": 5,
                        "type": "button",
                        "updateQueue": null,
                      },
                      "effectTag": 1,
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 1,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "buttonClass": "search-button button-red",
                        "children": "Search",
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "buttonClass": "search-button button-red",
                        "children": "Search",
                      },
                      "ref": null,
                      "return": [Circular],
                      "sibling": null,
                      "stateNode": null,
                      "tag": 1,
                      "type": [Function],
                      "updateQueue": null,
                    },
                    "stateNode": <div
                      class="filter-buttons"
                    >
                      <p
                        class="search-by"
                      >
                        Search by
                      </p>
                      <button
                        class="button filter-button button-red"
                      >
                        genre
                      </button>
                      <button
                        class="button filter-button button-grey"
                      >
                        title
                      </button>
                    </div>,
                    "tag": 5,
                    "type": "div",
                    "updateQueue": null,
                  },
                  "effectTag": 0,
                  "expirationTime": 0,
                  "firstEffect": null,
                  "index": 3,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "children": Array [
                      <div
                        className="filter-buttons"
                      >
                        <p
                          className="search-by"
                        >
                          Search by
                        </p>
                        <Button
                          buttonClass="filter-button button-red"
                        >
                          genre
                        </Button>
                        <Button
                          buttonClass="filter-button button-grey"
                        >
                          title
                        </Button>
                      </div>,
                      <Button
                        buttonClass="search-button button-red"
                      >
                        Search
                      </Button>,
                    ],
                    "className": "button-group",
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "children": Array [
                      <div
                        className="filter-buttons"
                      >
                        <p
                          className="search-by"
                        >
                          Search by
                        </p>
                        <Button
                          buttonClass="filter-button button-red"
                        >
                          genre
                        </Button>
                        <Button
                          buttonClass="filter-button button-grey"
                        >
                          title
                        </Button>
                      </div>,
                      <Button
                        buttonClass="search-button button-red"
                      >
                        Search
                      </Button>,
                    ],
                    "className": "button-group",
                  },
                  "ref": null,
                  "return": [Circular],
                  "sibling": null,
                  "stateNode": <div
                    class="button-group"
                  >
                    <div
                      class="filter-buttons"
                    >
                      <p
                        class="search-by"
                      >
                        Search by
                      </p>
                      <button
                        class="button filter-button button-red"
                      >
                        genre
                      </button>
                      <button
                        class="button filter-button button-grey"
                      >
                        title
                      </button>
                    </div>
                    <button
                      class="button search-button button-red"
                    >
                      Search
                    </button>
                  </div>,
                  "tag": 5,
                  "type": "div",
                  "updateQueue": null,
                },
                "stateNode": null,
                "tag": 1,
                "type": [Function],
                "updateQueue": null,
              },
              "stateNode": <h2
                class="find-movie"
              >
                Find your movie
              </h2>,
              "tag": 5,
              "type": "h2",
              "updateQueue": null,
            },
            "stateNode": null,
            "tag": 1,
            "type": [Function],
            "updateQueue": null,
          },
          "effectTag": 0,
          "expirationTime": 0,
          "firstEffect": null,
          "index": 0,
          "key": null,
          "lastEffect": null,
          "memoizedProps": Object {
            "children": Array [
              <Logo />,
              <h2
                className="find-movie"
              >
                Find your movie
              </h2>,
              <SearchInput />,
              <div
                className="button-group"
              >
                <div
                  className="filter-buttons"
                >
                  <p
                    className="search-by"
                  >
                    Search by
                  </p>
                  <Button
                    buttonClass="filter-button button-red"
                  >
                    genre
                  </Button>
                  <Button
                    buttonClass="filter-button button-grey"
                  >
                    title
                  </Button>
                </div>
                <Button
                  buttonClass="search-button button-red"
                >
                  Search
                </Button>
              </div>,
            ],
            "className": "search-header",
          },
          "memoizedState": null,
          "mode": 0,
          "nextEffect": null,
          "pendingProps": Object {
            "children": Array [
              <Logo />,
              <h2
                className="find-movie"
              >
                Find your movie
              </h2>,
              <SearchInput />,
              <div
                className="button-group"
              >
                <div
                  className="filter-buttons"
                >
                  <p
                    className="search-by"
                  >
                    Search by
                  </p>
                  <Button
                    buttonClass="filter-button button-red"
                  >
                    genre
                  </Button>
                  <Button
                    buttonClass="filter-button button-grey"
                  >
                    title
                  </Button>
                </div>
                <Button
                  buttonClass="search-button button-red"
                >
                  Search
                </Button>
              </div>,
            ],
            "className": "search-header",
          },
          "ref": null,
          "return": [Circular],
          "sibling": null,
          "stateNode": <div
            class="search-header"
          >
            <p
              class="logo"
            >
              netflixroulette
            </p>
            <h2
              class="find-movie"
            >
              Find your movie
            </h2>
            <div
              class="search-input-wrapper"
            >
              <input
                class="search-input"
                placeholder="Let's find your movie"
              />
              <img
                src="test-file-stub"
              />
            </div>
            <div
              class="button-group"
            >
              <div
                class="filter-buttons"
              >
                <p
                  class="search-by"
                >
                  Search by
                </p>
                <button
                  class="button filter-button button-red"
                >
                  genre
                </button>
                <button
                  class="button filter-button button-grey"
                >
                  title
                </button>
              </div>
              <button
                class="button search-button button-red"
              >
                Search
              </button>
            </div>
          </div>,
          "tag": 5,
          "type": "div",
          "updateQueue": null,
        },
        "effectTag": 1,
        "expirationTime": 0,
        "firstEffect": null,
        "index": 0,
        "key": null,
        "lastEffect": null,
        "memoizedProps": Object {},
        "memoizedState": null,
        "mode": 0,
        "nextEffect": null,
        "pendingProps": Object {},
        "ref": null,
        "return": FiberNode {
          "_debugID": 25,
          "_debugIsCurrentlyTiming": false,
          "_debugOwner": null,
          "_debugSource": null,
          "alternate": null,
          "child": [Circular],
          "effectTag": 1,
          "expirationTime": 0,
          "firstEffect": null,
          "index": 0,
          "key": null,
          "lastEffect": null,
          "memoizedProps": Object {
            "Component": [Function],
            "context": null,
            "props": Object {},
          },
          "memoizedState": Object {
            "context": null,
            "mount": true,
            "props": Object {},
          },
          "mode": 0,
          "nextEffect": null,
          "pendingProps": Object {
            "Component": [Function],
            "context": null,
            "props": Object {},
          },
          "ref": null,
          "return": FiberNode {
            "_debugID": 23,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "alternate": FiberNode {
              "_debugID": 23,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "alternate": [Circular],
              "child": null,
              "effectTag": 0,
              "expirationTime": 1,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": null,
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": null,
              "ref": null,
              "return": null,
              "sibling": null,
              "stateNode": Object {
                "containerInfo": <div>
                  <div
                    class="search-header"
                  >
                    <p
                      class="logo"
                    >
                      netflixroulette
                    </p>
                    <h2
                      class="find-movie"
                    >
                      Find your movie
                    </h2>
                    <div
                      class="search-input-wrapper"
                    >
                      <input
                        class="search-input"
                        placeholder="Let's find your movie"
                      />
                      <img
                        src="test-file-stub"
                      />
                    </div>
                    <div
                      class="button-group"
                    >
                      <div
                        class="filter-buttons"
                      >
                        <p
                          class="search-by"
                        >
                          Search by
                        </p>
                        <button
                          class="button filter-button button-red"
                        >
                          genre
                        </button>
                        <button
                          class="button filter-button button-grey"
                        >
                          title
                        </button>
                      </div>
                      <button
                        class="button search-button button-red"
                      >
                        Search
                      </button>
                    </div>
                  </div>
                </div>,
                "context": Object {},
                "current": [Circular],
                "finishedWork": null,
                "firstBatch": null,
                "hydrate": false,
                "nextScheduledRoot": null,
                "pendingChildren": null,
                "pendingCommitExpirationTime": 0,
                "pendingContext": null,
                "remainingExpirationTime": 0,
              },
              "tag": 3,
              "type": null,
              "updateQueue": Object {
                "baseState": null,
                "callbackList": null,
                "capturedValues": null,
                "expirationTime": 1,
                "first": Object {
                  "callback": null,
                  "capturedValue": null,
                  "expirationTime": 1,
                  "isForced": false,
                  "isReplace": false,
                  "next": null,
                  "partialState": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={Object {}}
                    />,
                  },
                },
                "hasForceUpdate": false,
                "isInitialized": false,
                "isProcessing": false,
                "last": Object {
                  "callback": null,
                  "capturedValue": null,
                  "expirationTime": 1,
                  "isForced": false,
                  "isReplace": false,
                  "next": null,
                  "partialState": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={Object {}}
                    />,
                  },
                },
              },
            },
            "child": [Circular],
            "effectTag": 32,
            "expirationTime": 0,
            "firstEffect": [Circular],
            "index": 0,
            "key": null,
            "lastEffect": [Circular],
            "memoizedProps": null,
            "memoizedState": Object {
              "element": <WrapperComponent
                Component={[Function]}
                context={null}
                props={Object {}}
              />,
            },
            "mode": 0,
            "nextEffect": null,
            "pendingProps": null,
            "ref": null,
            "return": null,
            "sibling": null,
            "stateNode": Object {
              "containerInfo": <div>
                <div
                  class="search-header"
                >
                  <p
                    class="logo"
                  >
                    netflixroulette
                  </p>
                  <h2
                    class="find-movie"
                  >
                    Find your movie
                  </h2>
                  <div
                    class="search-input-wrapper"
                  >
                    <input
                      class="search-input"
                      placeholder="Let's find your movie"
                    />
                    <img
                      src="test-file-stub"
                    />
                  </div>
                  <div
                    class="button-group"
                  >
                    <div
                      class="filter-buttons"
                    >
                      <p
                        class="search-by"
                      >
                        Search by
                      </p>
                      <button
                        class="button filter-button button-red"
                      >
                        genre
                      </button>
                      <button
                        class="button filter-button button-grey"
                      >
                        title
                      </button>
                    </div>
                    <button
                      class="button search-button button-red"
                    >
                      Search
                    </button>
                  </div>
                </div>
              </div>,
              "context": Object {},
              "current": [Circular],
              "finishedWork": null,
              "firstBatch": null,
              "hydrate": false,
              "nextScheduledRoot": null,
              "pendingChildren": null,
              "pendingCommitExpirationTime": 0,
              "pendingContext": null,
              "remainingExpirationTime": 0,
            },
            "tag": 3,
            "type": null,
            "updateQueue": Object {
              "baseState": Object {
                "element": <WrapperComponent
                  Component={[Function]}
                  context={null}
                  props={Object {}}
                />,
              },
              "callbackList": null,
              "capturedValues": null,
              "expirationTime": 0,
              "first": null,
              "hasForceUpdate": false,
              "isInitialized": true,
              "isProcessing": false,
              "last": null,
            },
          },
          "sibling": null,
          "stateNode": WrapperComponent {
            "_reactInternalFiber": [Circular],
            "_reactInternalInstance": Object {},
            "context": Object {},
            "props": Object {
              "Component": [Function],
              "context": null,
              "props": Object {},
            },
            "refs": Object {},
            "state": Object {
              "context": null,
              "mount": true,
              "props": Object {},
            },
            "updater": Object {
              "enqueueForceUpdate": [Function],
              "enqueueReplaceState": [Function],
              "enqueueSetState": [Function],
              "isMounted": [Function],
            },
          },
          "tag": 2,
          "type": [Function],
          "updateQueue": null,
        },
        "sibling": null,
        "stateNode": [Circular],
        "tag": 2,
        "type": [Function],
        "updateQueue": null,
      },
      "_reactInternalInstance": Object {},
      "context": Object {},
      "props": Object {},
      "refs": Object {},
      "state": null,
      "updater": Object {
        "enqueueForceUpdate": [Function],
        "enqueueReplaceState": [Function],
        "enqueueSetState": [Function],
        "isMounted": [Function],
      },
    },
    "key": undefined,
    "nodeType": "class",
    "props": Object {},
    "ref": null,
    "rendered": Object {
      "instance": <div
        class="search-header"
      >
        <p
          class="logo"
        >
          netflixroulette
        </p>
        <h2
          class="find-movie"
        >
          Find your movie
        </h2>
        <div
          class="search-input-wrapper"
        >
          <input
            class="search-input"
            placeholder="Let's find your movie"
          />
          <img
            src="test-file-stub"
          />
        </div>
        <div
          class="button-group"
        >
          <div
            class="filter-buttons"
          >
            <p
              class="search-by"
            >
              Search by
            </p>
            <button
              class="button filter-button button-red"
            >
              genre
            </button>
            <button
              class="button filter-button button-grey"
            >
              title
            </button>
          </div>
          <button
            class="button search-button button-red"
          >
            Search
          </button>
        </div>
      </div>,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <Logo />,
          <h2
            className="find-movie"
          >
            Find your movie
          </h2>,
          <SearchInput />,
          <div
            className="button-group"
          >
            <div
              className="filter-buttons"
            >
              <p
                className="search-by"
              >
                Search by
              </p>
              <Button
                buttonClass="filter-button button-red"
              >
                genre
              </Button>
              <Button
                buttonClass="filter-button button-grey"
              >
                title
              </Button>
            </div>
            <Button
              buttonClass="search-button button-red"
            >
              Search
            </Button>
          </div>,
        ],
        "className": "search-header",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {},
          "ref": null,
          "rendered": Object {
            "instance": <p
              class="logo"
            >
              netflixroulette
            </p>,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "netflixroulette",
              "className": "logo",
            },
            "ref": null,
            "rendered": Array [
              "netflixroulette",
            ],
            "type": "p",
          },
          "type": [Function],
        },
        Object {
          "instance": <h2
            class="find-movie"
          >
            Find your movie
          </h2>,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Find your movie",
            "className": "find-movie",
          },
          "ref": null,
          "rendered": Array [
            "Find your movie",
          ],
          "type": "h2",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {},
          "ref": null,
          "rendered": Object {
            "instance": <div
              class="search-input-wrapper"
            >
              <input
                class="search-input"
                placeholder="Let's find your movie"
              />
              <img
                src="test-file-stub"
              />
            </div>,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <input
                  className="search-input"
                  placeholder="Let's find your movie"
                />,
                <img
                  src="test-file-stub"
                />,
              ],
              "className": "search-input-wrapper",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": <input
                  class="search-input"
                  placeholder="Let's find your movie"
                />,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "className": "search-input",
                  "placeholder": "Let's find your movie",
                },
                "ref": null,
                "rendered": Array [
                  undefined,
                ],
                "type": "input",
              },
              Object {
                "instance": <img
                  src="test-file-stub"
                />,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "src": "test-file-stub",
                },
                "ref": null,
                "rendered": Array [
                  undefined,
                ],
                "type": "img",
              },
            ],
            "type": "div",
          },
          "type": [Function],
        },
        Object {
          "instance": <div
            class="button-group"
          >
            <div
              class="filter-buttons"
            >
              <p
                class="search-by"
              >
                Search by
              </p>
              <button
                class="button filter-button button-red"
              >
                genre
              </button>
              <button
                class="button filter-button button-grey"
              >
                title
              </button>
            </div>
            <button
              class="button search-button button-red"
            >
              Search
            </button>
          </div>,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <div
                className="filter-buttons"
              >
                <p
                  className="search-by"
                >
                  Search by
                </p>
                <Button
                  buttonClass="filter-button button-red"
                >
                  genre
                </Button>
                <Button
                  buttonClass="filter-button button-grey"
                >
                  title
                </Button>
              </div>,
              <Button
                buttonClass="search-button button-red"
              >
                Search
              </Button>,
            ],
            "className": "button-group",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": <div
                class="filter-buttons"
              >
                <p
                  class="search-by"
                >
                  Search by
                </p>
                <button
                  class="button filter-button button-red"
                >
                  genre
                </button>
                <button
                  class="button filter-button button-grey"
                >
                  title
                </button>
              </div>,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <p
                    className="search-by"
                  >
                    Search by
                  </p>,
                  <Button
                    buttonClass="filter-button button-red"
                  >
                    genre
                  </Button>,
                  <Button
                    buttonClass="filter-button button-grey"
                  >
                    title
                  </Button>,
                ],
                "className": "filter-buttons",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": <p
                    class="search-by"
                  >
                    Search by
                  </p>,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "Search by",
                    "className": "search-by",
                  },
                  "ref": null,
                  "rendered": Array [
                    "Search by",
                  ],
                  "type": "p",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "buttonClass": "filter-button button-red",
                    "children": "genre",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": <button
                      class="button filter-button button-red"
                    >
                      genre
                    </button>,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": "genre",
                      "className": "button filter-button button-red",
                    },
                    "ref": null,
                    "rendered": Array [
                      "genre",
                    ],
                    "type": "button",
                  },
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "buttonClass": "filter-button button-grey",
                    "children": "title",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": <button
                      class="button filter-button button-grey"
                    >
                      title
                    </button>,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": "title",
                      "className": "button filter-button button-grey",
                    },
                    "ref": null,
                    "rendered": Array [
                      "title",
                    ],
                    "type": "button",
                  },
                  "type": [Function],
                },
              ],
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "buttonClass": "search-button button-red",
                "children": "Search",
              },
              "ref": null,
              "rendered": Object {
                "instance": <button
                  class="button search-button button-red"
                >
                  Search
                </button>,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Search",
                  "className": "button search-button button-red",
                },
                "ref": null,
                "rendered": Array [
                  "Search",
                ],
                "type": "button",
              },
              "type": [Function],
            },
          ],
          "type": "div",
        },
      ],
      "type": "div",
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": SearchHeader {
        "_reactInternalFiber": FiberNode {
          "_debugID": 26,
          "_debugIsCurrentlyTiming": false,
          "_debugOwner": FiberNode {
            "_debugID": 25,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "alternate": null,
            "child": [Circular],
            "effectTag": 1,
            "expirationTime": 0,
            "firstEffect": null,
            "index": 0,
            "key": null,
            "lastEffect": null,
            "memoizedProps": Object {
              "Component": [Function],
              "context": null,
              "props": Object {},
            },
            "memoizedState": Object {
              "context": null,
              "mount": true,
              "props": Object {},
            },
            "mode": 0,
            "nextEffect": null,
            "pendingProps": Object {
              "Component": [Function],
              "context": null,
              "props": Object {},
            },
            "ref": null,
            "return": FiberNode {
              "_debugID": 23,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "alternate": FiberNode {
                "_debugID": 23,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": null,
                "alternate": [Circular],
                "child": null,
                "effectTag": 0,
                "expirationTime": 1,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": null,
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": null,
                "ref": null,
                "return": null,
                "sibling": null,
                "stateNode": Object {
                  "containerInfo": <div>
                    <div
                      class="search-header"
                    >
                      <p
                        class="logo"
                      >
                        netflixroulette
                      </p>
                      <h2
                        class="find-movie"
                      >
                        Find your movie
                      </h2>
                      <div
                        class="search-input-wrapper"
                      >
                        <input
                          class="search-input"
                          placeholder="Let's find your movie"
                        />
                        <img
                          src="test-file-stub"
                        />
                      </div>
                      <div
                        class="button-group"
                      >
                        <div
                          class="filter-buttons"
                        >
                          <p
                            class="search-by"
                          >
                            Search by
                          </p>
                          <button
                            class="button filter-button button-red"
                          >
                            genre
                          </button>
                          <button
                            class="button filter-button button-grey"
                          >
                            title
                          </button>
                        </div>
                        <button
                          class="button search-button button-red"
                        >
                          Search
                        </button>
                      </div>
                    </div>
                  </div>,
                  "context": Object {},
                  "current": [Circular],
                  "finishedWork": null,
                  "firstBatch": null,
                  "hydrate": false,
                  "nextScheduledRoot": null,
                  "pendingChildren": null,
                  "pendingCommitExpirationTime": 0,
                  "pendingContext": null,
                  "remainingExpirationTime": 0,
                },
                "tag": 3,
                "type": null,
                "updateQueue": Object {
                  "baseState": null,
                  "callbackList": null,
                  "capturedValues": null,
                  "expirationTime": 1,
                  "first": Object {
                    "callback": null,
                    "capturedValue": null,
                    "expirationTime": 1,
                    "isForced": false,
                    "isReplace": false,
                    "next": null,
                    "partialState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={Object {}}
                      />,
                    },
                  },
                  "hasForceUpdate": false,
                  "isInitialized": false,
                  "isProcessing": false,
                  "last": Object {
                    "callback": null,
                    "capturedValue": null,
                    "expirationTime": 1,
                    "isForced": false,
                    "isReplace": false,
                    "next": null,
                    "partialState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={Object {}}
                      />,
                    },
                  },
                },
              },
              "child": [Circular],
              "effectTag": 32,
              "expirationTime": 0,
              "firstEffect": [Circular],
              "index": 0,
              "key": null,
              "lastEffect": [Circular],
              "memoizedProps": null,
              "memoizedState": Object {
                "element": <WrapperComponent
                  Component={[Function]}
                  context={null}
                  props={Object {}}
                />,
              },
              "mode": 0,
              "nextEffect": null,
              "pendingProps": null,
              "ref": null,
              "return": null,
              "sibling": null,
              "stateNode": Object {
                "containerInfo": <div>
                  <div
                    class="search-header"
                  >
                    <p
                      class="logo"
                    >
                      netflixroulette
                    </p>
                    <h2
                      class="find-movie"
                    >
                      Find your movie
                    </h2>
                    <div
                      class="search-input-wrapper"
                    >
                      <input
                        class="search-input"
                        placeholder="Let's find your movie"
                      />
                      <img
                        src="test-file-stub"
                      />
                    </div>
                    <div
                      class="button-group"
                    >
                      <div
                        class="filter-buttons"
                      >
                        <p
                          class="search-by"
                        >
                          Search by
                        </p>
                        <button
                          class="button filter-button button-red"
                        >
                          genre
                        </button>
                        <button
                          class="button filter-button button-grey"
                        >
                          title
                        </button>
                      </div>
                      <button
                        class="button search-button button-red"
                      >
                        Search
                      </button>
                    </div>
                  </div>
                </div>,
                "context": Object {},
                "current": [Circular],
                "finishedWork": null,
                "firstBatch": null,
                "hydrate": false,
                "nextScheduledRoot": null,
                "pendingChildren": null,
                "pendingCommitExpirationTime": 0,
                "pendingContext": null,
                "remainingExpirationTime": 0,
              },
              "tag": 3,
              "type": null,
              "updateQueue": Object {
                "baseState": Object {
                  "element": <WrapperComponent
                    Component={[Function]}
                    context={null}
                    props={Object {}}
                  />,
                },
                "callbackList": null,
                "capturedValues": null,
                "expirationTime": 0,
                "first": null,
                "hasForceUpdate": false,
                "isInitialized": true,
                "isProcessing": false,
                "last": null,
              },
            },
            "sibling": null,
            "stateNode": WrapperComponent {
              "_reactInternalFiber": [Circular],
              "_reactInternalInstance": Object {},
              "context": Object {},
              "props": Object {
                "Component": [Function],
                "context": null,
                "props": Object {},
              },
              "refs": Object {},
              "state": Object {
                "context": null,
                "mount": true,
                "props": Object {},
              },
              "updater": Object {
                "enqueueForceUpdate": [Function],
                "enqueueReplaceState": [Function],
                "enqueueSetState": [Function],
                "isMounted": [Function],
              },
            },
            "tag": 2,
            "type": [Function],
            "updateQueue": null,
          },
          "_debugSource": null,
          "alternate": null,
          "child": FiberNode {
            "_debugID": 27,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": [Circular],
            "_debugSource": null,
            "alternate": null,
            "child": FiberNode {
              "_debugID": 28,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": [Circular],
              "_debugSource": null,
              "alternate": null,
              "child": FiberNode {
                "_debugID": 32,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": [Circular],
                "_debugSource": null,
                "alternate": null,
                "child": null,
                "effectTag": 0,
                "expirationTime": 0,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "children": "netflixroulette",
                  "className": "logo",
                },
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "children": "netflixroulette",
                  "className": "logo",
                },
                "ref": null,
                "return": [Circular],
                "sibling": null,
                "stateNode": <p
                  class="logo"
                >
                  netflixroulette
                </p>,
                "tag": 5,
                "type": "p",
                "updateQueue": null,
              },
              "effectTag": 1,
              "expirationTime": 0,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {},
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {},
              "ref": null,
              "return": [Circular],
              "sibling": FiberNode {
                "_debugID": 29,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": [Circular],
                "_debugSource": null,
                "alternate": null,
                "child": null,
                "effectTag": 0,
                "expirationTime": 0,
                "firstEffect": null,
                "index": 1,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "children": "Find your movie",
                  "className": "find-movie",
                },
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "children": "Find your movie",
                  "className": "find-movie",
                },
                "ref": null,
                "return": [Circular],
                "sibling": FiberNode {
                  "_debugID": 30,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": [Circular],
                  "_debugSource": null,
                  "alternate": null,
                  "child": FiberNode {
                    "_debugID": 33,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": null,
                    "alternate": null,
                    "child": FiberNode {
                      "_debugID": 34,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": null,
                      "alternate": null,
                      "child": null,
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "className": "search-input",
                        "placeholder": "Let's find your movie",
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "className": "search-input",
                        "placeholder": "Let's find your movie",
                      },
                      "ref": null,
                      "return": [Circular],
                      "sibling": FiberNode {
                        "_debugID": 35,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": [Circular],
                        "_debugSource": null,
                        "alternate": null,
                        "child": null,
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstEffect": null,
                        "index": 1,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "src": "test-file-stub",
                        },
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "src": "test-file-stub",
                        },
                        "ref": null,
                        "return": [Circular],
                        "sibling": null,
                        "stateNode": <img
                          src="test-file-stub"
                        />,
                        "tag": 5,
                        "type": "img",
                        "updateQueue": null,
                      },
                      "stateNode": <input
                        class="search-input"
                        placeholder="Let's find your movie"
                      />,
                      "tag": 5,
                      "type": "input",
                      "updateQueue": null,
                    },
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": Array [
                        <input
                          className="search-input"
                          placeholder="Let's find your movie"
                        />,
                        <img
                          src="test-file-stub"
                        />,
                      ],
                      "className": "search-input-wrapper",
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": Array [
                        <input
                          className="search-input"
                          placeholder="Let's find your movie"
                        />,
                        <img
                          src="test-file-stub"
                        />,
                      ],
                      "className": "search-input-wrapper",
                    },
                    "ref": null,
                    "return": [Circular],
                    "sibling": null,
                    "stateNode": <div
                      class="search-input-wrapper"
                    >
                      <input
                        class="search-input"
                        placeholder="Let's find your movie"
                      />
                      <img
                        src="test-file-stub"
                      />
                    </div>,
                    "tag": 5,
                    "type": "div",
                    "updateQueue": null,
                  },
                  "effectTag": 1,
                  "expirationTime": 0,
                  "firstEffect": null,
                  "index": 2,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {},
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {},
                  "ref": null,
                  "return": [Circular],
                  "sibling": FiberNode {
                    "_debugID": 31,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": null,
                    "alternate": null,
                    "child": FiberNode {
                      "_debugID": 36,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": null,
                      "alternate": null,
                      "child": FiberNode {
                        "_debugID": 38,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": [Circular],
                        "_debugSource": null,
                        "alternate": null,
                        "child": null,
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstEffect": null,
                        "index": 0,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "children": "Search by",
                          "className": "search-by",
                        },
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "children": "Search by",
                          "className": "search-by",
                        },
                        "ref": null,
                        "return": [Circular],
                        "sibling": FiberNode {
                          "_debugID": 39,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": [Circular],
                          "_debugSource": null,
                          "alternate": null,
                          "child": FiberNode {
                            "_debugID": 41,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": [Circular],
                            "_debugSource": null,
                            "alternate": null,
                            "child": null,
                            "effectTag": 0,
                            "expirationTime": 0,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": Object {
                              "children": "genre",
                              "className": "button filter-button button-red",
                            },
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": Object {
                              "children": "genre",
                              "className": "button filter-button button-red",
                            },
                            "ref": null,
                            "return": [Circular],
                            "sibling": null,
                            "stateNode": <button
                              class="button filter-button button-red"
                            >
                              genre
                            </button>,
                            "tag": 5,
                            "type": "button",
                            "updateQueue": null,
                          },
                          "effectTag": 1,
                          "expirationTime": 0,
                          "firstEffect": null,
                          "index": 1,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": Object {
                            "buttonClass": "filter-button button-red",
                            "children": "genre",
                          },
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": Object {
                            "buttonClass": "filter-button button-red",
                            "children": "genre",
                          },
                          "ref": null,
                          "return": [Circular],
                          "sibling": FiberNode {
                            "_debugID": 40,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": [Circular],
                            "_debugSource": null,
                            "alternate": null,
                            "child": FiberNode {
                              "_debugID": 42,
                              "_debugIsCurrentlyTiming": false,
                              "_debugOwner": [Circular],
                              "_debugSource": null,
                              "alternate": null,
                              "child": null,
                              "effectTag": 0,
                              "expirationTime": 0,
                              "firstEffect": null,
                              "index": 0,
                              "key": null,
                              "lastEffect": null,
                              "memoizedProps": Object {
                                "children": "title",
                                "className": "button filter-button button-grey",
                              },
                              "memoizedState": null,
                              "mode": 0,
                              "nextEffect": null,
                              "pendingProps": Object {
                                "children": "title",
                                "className": "button filter-button button-grey",
                              },
                              "ref": null,
                              "return": [Circular],
                              "sibling": null,
                              "stateNode": <button
                                class="button filter-button button-grey"
                              >
                                title
                              </button>,
                              "tag": 5,
                              "type": "button",
                              "updateQueue": null,
                            },
                            "effectTag": 1,
                            "expirationTime": 0,
                            "firstEffect": null,
                            "index": 2,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": Object {
                              "buttonClass": "filter-button button-grey",
                              "children": "title",
                            },
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": Object {
                              "buttonClass": "filter-button button-grey",
                              "children": "title",
                            },
                            "ref": null,
                            "return": [Circular],
                            "sibling": null,
                            "stateNode": null,
                            "tag": 1,
                            "type": [Function],
                            "updateQueue": null,
                          },
                          "stateNode": null,
                          "tag": 1,
                          "type": [Function],
                          "updateQueue": null,
                        },
                        "stateNode": <p
                          class="search-by"
                        >
                          Search by
                        </p>,
                        "tag": 5,
                        "type": "p",
                        "updateQueue": null,
                      },
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": Array [
                          <p
                            className="search-by"
                          >
                            Search by
                          </p>,
                          <Button
                            buttonClass="filter-button button-red"
                          >
                            genre
                          </Button>,
                          <Button
                            buttonClass="filter-button button-grey"
                          >
                            title
                          </Button>,
                        ],
                        "className": "filter-buttons",
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "children": Array [
                          <p
                            className="search-by"
                          >
                            Search by
                          </p>,
                          <Button
                            buttonClass="filter-button button-red"
                          >
                            genre
                          </Button>,
                          <Button
                            buttonClass="filter-button button-grey"
                          >
                            title
                          </Button>,
                        ],
                        "className": "filter-buttons",
                      },
                      "ref": null,
                      "return": [Circular],
                      "sibling": FiberNode {
                        "_debugID": 37,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": [Circular],
                        "_debugSource": null,
                        "alternate": null,
                        "child": FiberNode {
                          "_debugID": 43,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": [Circular],
                          "_debugSource": null,
                          "alternate": null,
                          "child": null,
                          "effectTag": 0,
                          "expirationTime": 0,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": Object {
                            "children": "Search",
                            "className": "button search-button button-red",
                          },
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": Object {
                            "children": "Search",
                            "className": "button search-button button-red",
                          },
                          "ref": null,
                          "return": [Circular],
                          "sibling": null,
                          "stateNode": <button
                            class="button search-button button-red"
                          >
                            Search
                          </button>,
                          "tag": 5,
                          "type": "button",
                          "updateQueue": null,
                        },
                        "effectTag": 1,
                        "expirationTime": 0,
                        "firstEffect": null,
                        "index": 1,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "buttonClass": "search-button button-red",
                          "children": "Search",
                        },
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "buttonClass": "search-button button-red",
                          "children": "Search",
                        },
                        "ref": null,
                        "return": [Circular],
                        "sibling": null,
                        "stateNode": null,
                        "tag": 1,
                        "type": [Function],
                        "updateQueue": null,
                      },
                      "stateNode": <div
                        class="filter-buttons"
                      >
                        <p
                          class="search-by"
                        >
                          Search by
                        </p>
                        <button
                          class="button filter-button button-red"
                        >
                          genre
                        </button>
                        <button
                          class="button filter-button button-grey"
                        >
                          title
                        </button>
                      </div>,
                      "tag": 5,
                      "type": "div",
                      "updateQueue": null,
                    },
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 3,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": Array [
                        <div
                          className="filter-buttons"
                        >
                          <p
                            className="search-by"
                          >
                            Search by
                          </p>
                          <Button
                            buttonClass="filter-button button-red"
                          >
                            genre
                          </Button>
                          <Button
                            buttonClass="filter-button button-grey"
                          >
                            title
                          </Button>
                        </div>,
                        <Button
                          buttonClass="search-button button-red"
                        >
                          Search
                        </Button>,
                      ],
                      "className": "button-group",
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": Array [
                        <div
                          className="filter-buttons"
                        >
                          <p
                            className="search-by"
                          >
                            Search by
                          </p>
                          <Button
                            buttonClass="filter-button button-red"
                          >
                            genre
                          </Button>
                          <Button
                            buttonClass="filter-button button-grey"
                          >
                            title
                          </Button>
                        </div>,
                        <Button
                          buttonClass="search-button button-red"
                        >
                          Search
                        </Button>,
                      ],
                      "className": "button-group",
                    },
                    "ref": null,
                    "return": [Circular],
                    "sibling": null,
                    "stateNode": <div
                      class="button-group"
                    >
                      <div
                        class="filter-buttons"
                      >
                        <p
                          class="search-by"
                        >
                          Search by
                        </p>
                        <button
                          class="button filter-button button-red"
                        >
                          genre
                        </button>
                        <button
                          class="button filter-button button-grey"
                        >
                          title
                        </button>
                      </div>
                      <button
                        class="button search-button button-red"
                      >
                        Search
                      </button>
                    </div>,
                    "tag": 5,
                    "type": "div",
                    "updateQueue": null,
                  },
                  "stateNode": null,
                  "tag": 1,
                  "type": [Function],
                  "updateQueue": null,
                },
                "stateNode": <h2
                  class="find-movie"
                >
                  Find your movie
                </h2>,
                "tag": 5,
                "type": "h2",
                "updateQueue": null,
              },
              "stateNode": null,
              "tag": 1,
              "type": [Function],
              "updateQueue": null,
            },
            "effectTag": 0,
            "expirationTime": 0,
            "firstEffect": null,
            "index": 0,
            "key": null,
            "lastEffect": null,
            "memoizedProps": Object {
              "children": Array [
                <Logo />,
                <h2
                  className="find-movie"
                >
                  Find your movie
                </h2>,
                <SearchInput />,
                <div
                  className="button-group"
                >
                  <div
                    className="filter-buttons"
                  >
                    <p
                      className="search-by"
                    >
                      Search by
                    </p>
                    <Button
                      buttonClass="filter-button button-red"
                    >
                      genre
                    </Button>
                    <Button
                      buttonClass="filter-button button-grey"
                    >
                      title
                    </Button>
                  </div>
                  <Button
                    buttonClass="search-button button-red"
                  >
                    Search
                  </Button>
                </div>,
              ],
              "className": "search-header",
            },
            "memoizedState": null,
            "mode": 0,
            "nextEffect": null,
            "pendingProps": Object {
              "children": Array [
                <Logo />,
                <h2
                  className="find-movie"
                >
                  Find your movie
                </h2>,
                <SearchInput />,
                <div
                  className="button-group"
                >
                  <div
                    className="filter-buttons"
                  >
                    <p
                      className="search-by"
                    >
                      Search by
                    </p>
                    <Button
                      buttonClass="filter-button button-red"
                    >
                      genre
                    </Button>
                    <Button
                      buttonClass="filter-button button-grey"
                    >
                      title
                    </Button>
                  </div>
                  <Button
                    buttonClass="search-button button-red"
                  >
                    Search
                  </Button>
                </div>,
              ],
              "className": "search-header",
            },
            "ref": null,
            "return": [Circular],
            "sibling": null,
            "stateNode": <div
              class="search-header"
            >
              <p
                class="logo"
              >
                netflixroulette
              </p>
              <h2
                class="find-movie"
              >
                Find your movie
              </h2>
              <div
                class="search-input-wrapper"
              >
                <input
                  class="search-input"
                  placeholder="Let's find your movie"
                />
                <img
                  src="test-file-stub"
                />
              </div>
              <div
                class="button-group"
              >
                <div
                  class="filter-buttons"
                >
                  <p
                    class="search-by"
                  >
                    Search by
                  </p>
                  <button
                    class="button filter-button button-red"
                  >
                    genre
                  </button>
                  <button
                    class="button filter-button button-grey"
                  >
                    title
                  </button>
                </div>
                <button
                  class="button search-button button-red"
                >
                  Search
                </button>
              </div>
            </div>,
            "tag": 5,
            "type": "div",
            "updateQueue": null,
          },
          "effectTag": 1,
          "expirationTime": 0,
          "firstEffect": null,
          "index": 0,
          "key": null,
          "lastEffect": null,
          "memoizedProps": Object {},
          "memoizedState": null,
          "mode": 0,
          "nextEffect": null,
          "pendingProps": Object {},
          "ref": null,
          "return": FiberNode {
            "_debugID": 25,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "alternate": null,
            "child": [Circular],
            "effectTag": 1,
            "expirationTime": 0,
            "firstEffect": null,
            "index": 0,
            "key": null,
            "lastEffect": null,
            "memoizedProps": Object {
              "Component": [Function],
              "context": null,
              "props": Object {},
            },
            "memoizedState": Object {
              "context": null,
              "mount": true,
              "props": Object {},
            },
            "mode": 0,
            "nextEffect": null,
            "pendingProps": Object {
              "Component": [Function],
              "context": null,
              "props": Object {},
            },
            "ref": null,
            "return": FiberNode {
              "_debugID": 23,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "alternate": FiberNode {
                "_debugID": 23,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": null,
                "alternate": [Circular],
                "child": null,
                "effectTag": 0,
                "expirationTime": 1,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": null,
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": null,
                "ref": null,
                "return": null,
                "sibling": null,
                "stateNode": Object {
                  "containerInfo": <div>
                    <div
                      class="search-header"
                    >
                      <p
                        class="logo"
                      >
                        netflixroulette
                      </p>
                      <h2
                        class="find-movie"
                      >
                        Find your movie
                      </h2>
                      <div
                        class="search-input-wrapper"
                      >
                        <input
                          class="search-input"
                          placeholder="Let's find your movie"
                        />
                        <img
                          src="test-file-stub"
                        />
                      </div>
                      <div
                        class="button-group"
                      >
                        <div
                          class="filter-buttons"
                        >
                          <p
                            class="search-by"
                          >
                            Search by
                          </p>
                          <button
                            class="button filter-button button-red"
                          >
                            genre
                          </button>
                          <button
                            class="button filter-button button-grey"
                          >
                            title
                          </button>
                        </div>
                        <button
                          class="button search-button button-red"
                        >
                          Search
                        </button>
                      </div>
                    </div>
                  </div>,
                  "context": Object {},
                  "current": [Circular],
                  "finishedWork": null,
                  "firstBatch": null,
                  "hydrate": false,
                  "nextScheduledRoot": null,
                  "pendingChildren": null,
                  "pendingCommitExpirationTime": 0,
                  "pendingContext": null,
                  "remainingExpirationTime": 0,
                },
                "tag": 3,
                "type": null,
                "updateQueue": Object {
                  "baseState": null,
                  "callbackList": null,
                  "capturedValues": null,
                  "expirationTime": 1,
                  "first": Object {
                    "callback": null,
                    "capturedValue": null,
                    "expirationTime": 1,
                    "isForced": false,
                    "isReplace": false,
                    "next": null,
                    "partialState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={Object {}}
                      />,
                    },
                  },
                  "hasForceUpdate": false,
                  "isInitialized": false,
                  "isProcessing": false,
                  "last": Object {
                    "callback": null,
                    "capturedValue": null,
                    "expirationTime": 1,
                    "isForced": false,
                    "isReplace": false,
                    "next": null,
                    "partialState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={Object {}}
                      />,
                    },
                  },
                },
              },
              "child": [Circular],
              "effectTag": 32,
              "expirationTime": 0,
              "firstEffect": [Circular],
              "index": 0,
              "key": null,
              "lastEffect": [Circular],
              "memoizedProps": null,
              "memoizedState": Object {
                "element": <WrapperComponent
                  Component={[Function]}
                  context={null}
                  props={Object {}}
                />,
              },
              "mode": 0,
              "nextEffect": null,
              "pendingProps": null,
              "ref": null,
              "return": null,
              "sibling": null,
              "stateNode": Object {
                "containerInfo": <div>
                  <div
                    class="search-header"
                  >
                    <p
                      class="logo"
                    >
                      netflixroulette
                    </p>
                    <h2
                      class="find-movie"
                    >
                      Find your movie
                    </h2>
                    <div
                      class="search-input-wrapper"
                    >
                      <input
                        class="search-input"
                        placeholder="Let's find your movie"
                      />
                      <img
                        src="test-file-stub"
                      />
                    </div>
                    <div
                      class="button-group"
                    >
                      <div
                        class="filter-buttons"
                      >
                        <p
                          class="search-by"
                        >
                          Search by
                        </p>
                        <button
                          class="button filter-button button-red"
                        >
                          genre
                        </button>
                        <button
                          class="button filter-button button-grey"
                        >
                          title
                        </button>
                      </div>
                      <button
                        class="button search-button button-red"
                      >
                        Search
                      </button>
                    </div>
                  </div>
                </div>,
                "context": Object {},
                "current": [Circular],
                "finishedWork": null,
                "firstBatch": null,
                "hydrate": false,
                "nextScheduledRoot": null,
                "pendingChildren": null,
                "pendingCommitExpirationTime": 0,
                "pendingContext": null,
                "remainingExpirationTime": 0,
              },
              "tag": 3,
              "type": null,
              "updateQueue": Object {
                "baseState": Object {
                  "element": <WrapperComponent
                    Component={[Function]}
                    context={null}
                    props={Object {}}
                  />,
                },
                "callbackList": null,
                "capturedValues": null,
                "expirationTime": 0,
                "first": null,
                "hasForceUpdate": false,
                "isInitialized": true,
                "isProcessing": false,
                "last": null,
              },
            },
            "sibling": null,
            "stateNode": WrapperComponent {
              "_reactInternalFiber": [Circular],
              "_reactInternalInstance": Object {},
              "context": Object {},
              "props": Object {
                "Component": [Function],
                "context": null,
                "props": Object {},
              },
              "refs": Object {},
              "state": Object {
                "context": null,
                "mount": true,
                "props": Object {},
              },
              "updater": Object {
                "enqueueForceUpdate": [Function],
                "enqueueReplaceState": [Function],
                "enqueueSetState": [Function],
                "isMounted": [Function],
              },
            },
            "tag": 2,
            "type": [Function],
            "updateQueue": null,
          },
          "sibling": null,
          "stateNode": [Circular],
          "tag": 2,
          "type": [Function],
          "updateQueue": null,
        },
        "_reactInternalInstance": Object {},
        "context": Object {},
        "props": Object {},
        "refs": Object {},
        "state": null,
        "updater": Object {
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
        },
      },
      "key": undefined,
      "nodeType": "class",
      "props": Object {},
      "ref": null,
      "rendered": Object {
        "instance": <div
          class="search-header"
        >
          <p
            class="logo"
          >
            netflixroulette
          </p>
          <h2
            class="find-movie"
          >
            Find your movie
          </h2>
          <div
            class="search-input-wrapper"
          >
            <input
              class="search-input"
              placeholder="Let's find your movie"
            />
            <img
              src="test-file-stub"
            />
          </div>
          <div
            class="button-group"
          >
            <div
              class="filter-buttons"
            >
              <p
                class="search-by"
              >
                Search by
              </p>
              <button
                class="button filter-button button-red"
              >
                genre
              </button>
              <button
                class="button filter-button button-grey"
              >
                title
              </button>
            </div>
            <button
              class="button search-button button-red"
            >
              Search
            </button>
          </div>
        </div>,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <Logo />,
            <h2
              className="find-movie"
            >
              Find your movie
            </h2>,
            <SearchInput />,
            <div
              className="button-group"
            >
              <div
                className="filter-buttons"
              >
                <p
                  className="search-by"
                >
                  Search by
                </p>
                <Button
                  buttonClass="filter-button button-red"
                >
                  genre
                </Button>
                <Button
                  buttonClass="filter-button button-grey"
                >
                  title
                </Button>
              </div>
              <Button
                buttonClass="search-button button-red"
              >
                Search
              </Button>
            </div>,
          ],
          "className": "search-header",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {},
            "ref": null,
            "rendered": Object {
              "instance": <p
                class="logo"
              >
                netflixroulette
              </p>,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "netflixroulette",
                "className": "logo",
              },
              "ref": null,
              "rendered": Array [
                "netflixroulette",
              ],
              "type": "p",
            },
            "type": [Function],
          },
          Object {
            "instance": <h2
              class="find-movie"
            >
              Find your movie
            </h2>,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Find your movie",
              "className": "find-movie",
            },
            "ref": null,
            "rendered": Array [
              "Find your movie",
            ],
            "type": "h2",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {},
            "ref": null,
            "rendered": Object {
              "instance": <div
                class="search-input-wrapper"
              >
                <input
                  class="search-input"
                  placeholder="Let's find your movie"
                />
                <img
                  src="test-file-stub"
                />
              </div>,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <input
                    className="search-input"
                    placeholder="Let's find your movie"
                  />,
                  <img
                    src="test-file-stub"
                  />,
                ],
                "className": "search-input-wrapper",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": <input
                    class="search-input"
                    placeholder="Let's find your movie"
                  />,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "className": "search-input",
                    "placeholder": "Let's find your movie",
                  },
                  "ref": null,
                  "rendered": Array [
                    undefined,
                  ],
                  "type": "input",
                },
                Object {
                  "instance": <img
                    src="test-file-stub"
                  />,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "src": "test-file-stub",
                  },
                  "ref": null,
                  "rendered": Array [
                    undefined,
                  ],
                  "type": "img",
                },
              ],
              "type": "div",
            },
            "type": [Function],
          },
          Object {
            "instance": <div
              class="button-group"
            >
              <div
                class="filter-buttons"
              >
                <p
                  class="search-by"
                >
                  Search by
                </p>
                <button
                  class="button filter-button button-red"
                >
                  genre
                </button>
                <button
                  class="button filter-button button-grey"
                >
                  title
                </button>
              </div>
              <button
                class="button search-button button-red"
              >
                Search
              </button>
            </div>,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <div
                  className="filter-buttons"
                >
                  <p
                    className="search-by"
                  >
                    Search by
                  </p>
                  <Button
                    buttonClass="filter-button button-red"
                  >
                    genre
                  </Button>
                  <Button
                    buttonClass="filter-button button-grey"
                  >
                    title
                  </Button>
                </div>,
                <Button
                  buttonClass="search-button button-red"
                >
                  Search
                </Button>,
              ],
              "className": "button-group",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": <div
                  class="filter-buttons"
                >
                  <p
                    class="search-by"
                  >
                    Search by
                  </p>
                  <button
                    class="button filter-button button-red"
                  >
                    genre
                  </button>
                  <button
                    class="button filter-button button-grey"
                  >
                    title
                  </button>
                </div>,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    <p
                      className="search-by"
                    >
                      Search by
                    </p>,
                    <Button
                      buttonClass="filter-button button-red"
                    >
                      genre
                    </Button>,
                    <Button
                      buttonClass="filter-button button-grey"
                    >
                      title
                    </Button>,
                  ],
                  "className": "filter-buttons",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": <p
                      class="search-by"
                    >
                      Search by
                    </p>,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": "Search by",
                      "className": "search-by",
                    },
                    "ref": null,
                    "rendered": Array [
                      "Search by",
                    ],
                    "type": "p",
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "buttonClass": "filter-button button-red",
                      "children": "genre",
                    },
                    "ref": null,
                    "rendered": Object {
                      "instance": <button
                        class="button filter-button button-red"
                      >
                        genre
                      </button>,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "genre",
                        "className": "button filter-button button-red",
                      },
                      "ref": null,
                      "rendered": Array [
                        "genre",
                      ],
                      "type": "button",
                    },
                    "type": [Function],
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "buttonClass": "filter-button button-grey",
                      "children": "title",
                    },
                    "ref": null,
                    "rendered": Object {
                      "instance": <button
                        class="button filter-button button-grey"
                      >
                        title
                      </button>,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "title",
                        "className": "button filter-button button-grey",
                      },
                      "ref": null,
                      "rendered": Array [
                        "title",
                      ],
                      "type": "button",
                    },
                    "type": [Function],
                  },
                ],
                "type": "div",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "buttonClass": "search-button button-red",
                  "children": "Search",
                },
                "ref": null,
                "rendered": Object {
                  "instance": <button
                    class="button search-button button-red"
                  >
                    Search
                  </button>,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "Search",
                    "className": "button search-button button-red",
                  },
                  "ref": null,
                  "rendered": Array [
                    "Search",
                  ],
                  "type": "button",
                },
                "type": [Function],
              },
            ],
            "type": "div",
          },
        ],
        "type": "div",
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;

exports[`<SearchHeader /> should render SearchHeader and match snapshot 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <SearchHeader />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <Logo />,
        <h2
          className="find-movie"
        >
          Find your movie
        </h2>,
        <SearchInput />,
        <div
          className="button-group"
        >
          <div
            className="filter-buttons"
          >
            <p
              className="search-by"
            >
              Search by
            </p>
            <Button
              buttonClass="filter-button button-red"
            >
              genre
            </Button>
            <Button
              buttonClass="filter-button button-grey"
            >
              title
            </Button>
          </div>
          <Button
            buttonClass="search-button button-red"
          >
            Search
          </Button>
        </div>,
      ],
      "className": "search-header",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Find your movie",
          "className": "find-movie",
        },
        "ref": null,
        "rendered": "Find your movie",
        "type": "h2",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <div
              className="filter-buttons"
            >
              <p
                className="search-by"
              >
                Search by
              </p>
              <Button
                buttonClass="filter-button button-red"
              >
                genre
              </Button>
              <Button
                buttonClass="filter-button button-grey"
              >
                title
              </Button>
            </div>,
            <Button
              buttonClass="search-button button-red"
            >
              Search
            </Button>,
          ],
          "className": "button-group",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <p
                  className="search-by"
                >
                  Search by
                </p>,
                <Button
                  buttonClass="filter-button button-red"
                >
                  genre
                </Button>,
                <Button
                  buttonClass="filter-button button-grey"
                >
                  title
                </Button>,
              ],
              "className": "filter-buttons",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Search by",
                  "className": "search-by",
                },
                "ref": null,
                "rendered": "Search by",
                "type": "p",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "buttonClass": "filter-button button-red",
                  "children": "genre",
                },
                "ref": null,
                "rendered": "genre",
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "buttonClass": "filter-button button-grey",
                  "children": "title",
                },
                "ref": null,
                "rendered": "title",
                "type": [Function],
              },
            ],
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "buttonClass": "search-button button-red",
              "children": "Search",
            },
            "ref": null,
            "rendered": "Search",
            "type": [Function],
          },
        ],
        "type": "div",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <Logo />,
          <h2
            className="find-movie"
          >
            Find your movie
          </h2>,
          <SearchInput />,
          <div
            className="button-group"
          >
            <div
              className="filter-buttons"
            >
              <p
                className="search-by"
              >
                Search by
              </p>
              <Button
                buttonClass="filter-button button-red"
              >
                genre
              </Button>
              <Button
                buttonClass="filter-button button-grey"
              >
                title
              </Button>
            </div>
            <Button
              buttonClass="search-button button-red"
            >
              Search
            </Button>
          </div>,
        ],
        "className": "search-header",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Find your movie",
            "className": "find-movie",
          },
          "ref": null,
          "rendered": "Find your movie",
          "type": "h2",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <div
                className="filter-buttons"
              >
                <p
                  className="search-by"
                >
                  Search by
                </p>
                <Button
                  buttonClass="filter-button button-red"
                >
                  genre
                </Button>
                <Button
                  buttonClass="filter-button button-grey"
                >
                  title
                </Button>
              </div>,
              <Button
                buttonClass="search-button button-red"
              >
                Search
              </Button>,
            ],
            "className": "button-group",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <p
                    className="search-by"
                  >
                    Search by
                  </p>,
                  <Button
                    buttonClass="filter-button button-red"
                  >
                    genre
                  </Button>,
                  <Button
                    buttonClass="filter-button button-grey"
                  >
                    title
                  </Button>,
                ],
                "className": "filter-buttons",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "Search by",
                    "className": "search-by",
                  },
                  "ref": null,
                  "rendered": "Search by",
                  "type": "p",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "buttonClass": "filter-button button-red",
                    "children": "genre",
                  },
                  "ref": null,
                  "rendered": "genre",
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "buttonClass": "filter-button button-grey",
                    "children": "title",
                  },
                  "ref": null,
                  "rendered": "title",
                  "type": [Function],
                },
              ],
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "buttonClass": "search-button button-red",
                "children": "Search",
              },
              "ref": null,
              "rendered": "Search",
              "type": [Function],
            },
          ],
          "type": "div",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;
